#!/bin/bash -eu
#
# Build kernel Debian packages
#

function pr_error() { echo -e "\033[31mE: ${*}\033[0m" >&2 ; }
function pr_info()  { echo -e "\033[33mI: ${*}\033[0m" ; }

function run_chroot()
{
	pr_info "Run in chroot (${CHROOT}):"
	pr_info "+ ${*}"
	run-chroot cranky--"${CHROOT}" -- "${@}"
}

function minimal_modules_raspi()
{
	cat <<EOF
8021q
8250_bcm7271
ac97_bus
aes_ce_blk
aes_ce_cipher
af_alg
algif_hash
algif_skcipher
autofs4
binfmt_misc
blake2b_generic
bluetooth
bnep
brcmfmac
brcmfmac_wcc
brcmutil
btbcm
btintel
btqca
btrfs
btrtl
btsdio
cec
cfg80211
cqhci
crct10dif_ce
dax
dm_mod
drm_display_helper
drm_dma_helper
drm_shmem_helper
dw_axi_dmac_platform
dwc2
dwc3
ecc
ecdh_generic
fuse
garp
gf128mul
ghash_ce
gpio_brcmstb
gpio_generic
gpio_keys
gpu_sched
hci_uart
hid_generic
i2c_brcmstb
i2c_designware_core
i2c_designware_platform
ip_tables
libcrc32c
llc
macb
mc
mrp
nfnetlink
nvmem_rmem
phy_generic
phylink
pisp_be
polyval_ce
polyval_generic
pwm_brcmstb
pwm_fan
pwm_rp1
qrtr
raid6_pq
raspberrypi_gpiomem
raspberrypi_hwmon
reset_brcmstb
reset_brcmstb_rescal
rfcomm
rfkill
roles
rp1_adc
rpivid_hevc
rtc_rpi
sdhci_brcmstb
sha1_ce
sha256_arm64
sha2_ce
sm4
snd
snd_compress
snd_hrtimer
snd_pcm
snd_pcm_dmaengine
snd_rawmidi
snd_seq
snd_seq_device
snd_seq_dummy
snd_seq_midi
snd_seq_midi_event
snd_soc_core
snd_soc_hdmi_codec
snd_timer
spi_bcm2835
spi_dw
spi_dw_mmio
spidev
stp
tls
udc_core
uio
uio_pdrv_genirq
ulpi
usbhid
v3d
v4l2_mem2mem
vc4
videobuf2_common
videobuf2_dma_contig
videobuf2_memops
videobuf2_v4l2
videodev
x_tables
xhci_plat_hcd
xor
xor_neon
z3fold
zstd
EOF
}

function minimal_modules_libvirt()
{
	cat <<EOF
aes_x86_64
aesni_intel
async_memcpy
async_pq
async_raid6_recov
async_tx
async_xor
autofs4
binfmt_misc
btrfs
cirrus
crc32_pclmul
crct10dif_pclmul
cryptd
crypto_simd
drm
drm_kms_helper
fb_sys_fops
floppy
ghash_clmulni_intel
glue_helper
i2c_piix4
ib_cm
ib_core
ib_iser
input_leds
ip_tables
irqbypass
iscsi_tcp
isofs
iw_cm
joydev
kvm
kvm_amd
libcrc32c
libiscsi
libiscsi_tcp
linear
mac_hid
multipath
nls_iso8859_1
pata_acpi
pcbc
psmouse
qemu_fw_cfg
raid0
raid1
raid10
raid456
raid6_pq
rdma_cm
sch_fq_codel
scsi_transport_iscsi
serio_raw
syscopyarea
sysfillrect
sysimgblt
ttm
virtio_blk
virtio_net
x_tables
xor
zstd_compress
EOF
}


function syz_configs()
{
	# Configs required for syzcaller
	cat <<EOF
# Coverage collection.
CONFIG_KCOV=y

# Debug info for symbolization.
CONFIG_DEBUG_INFO_DWARF4=y

# Memory bug detector
CONFIG_KASAN=y
CONFIG_KASAN_INLINE=y

# Required for Debian Stretch and later
CONFIG_CONFIGFS_FS=y
CONFIG_SECURITYFS=y
EOF
}

function usage()
{
	cat <<EOF
Usage: $(basename "${0}") [-h] CMD [ARGS...]

Build kernel Debian packages.

To build an Ubuntu raspi kernel:
  $ build-kernel-deb config raspi
  $ build-kernel-deb make

To build a generic Ubuntu kernel:
  $ build-kernel-deb config generic
  $ build-kernel-deb make

Available commands:
  config [CONFIG]    Create kernel config. Supported <CONFIG> values:
                       menu:    Run config menu.
                       generic: Use generic Ubuntu configs.
                       raspi:   Use raspi Ubuntu configs.
                       *config: Use upstream arch/<arch>/configs/*config configs.
  make               Build kernel Debian packages.

Optional common arguments:
  --arch ARCH        Debian package architecture.
  --buildd BUILDD    Use buildd/<BUILDD> as the build output directory.
                     If not provided, defaults to buildd/<SERIES>.
  --chroot CHROOT    Use chroot <CHROOT>.
  -h, --help         Show this help text and exit.
  -jX                Number of jobs, default one per CPU.

Optional arguments for 'config' command:
  --lsmod LSMOD      Build modules listed in <LSMOD>.
  --min TARGET       Build a minimal set of hard-coded modules. Supported
                     <TARGET> values: libvirt, raspi.
  --syz              Enable config options for syzcaller.
EOF
}

arch=
buildd=
chroot=
jobs=$(getconf _NPROCESSORS_ONLN)
lsmod=
cmd=
flavor=
min=
syz=0

module_subset=0

while [ ${#} -gt 0 ] ; do
	case "${1}" in
		--arch)
			shift
			arch=${1}
			;;
		--buildd)
			shift
			buildd=${1}
			;;
		--chroot)
			shift
			chroot=${1}
			;;
		-h|--help)
			usage
			exit
			;;
		-j[1-9]*)
			jobs=${1#-j}
			if [ -z "${jobs}" ] ; then
				shift
				jobs=${1}
			fi
			;;
		--lsmod)
			shift
			lsmod=${1}
			module_subset=1
			;;
		--min)
			shift
			min=${1}
			module_subset=1
			;;
		--syz)
			syz=1
			;;
		config)
			cmd=${1}
			shift
			flavor=${1}
			;;
		make)
			cmd=${1}
			;;
		*)
			break
			;;
	esac
	shift
done

if [ -z "${cmd}" ] ; then
	usage
	exit 2
fi

#
# Determine the chroot and series
#

if [ -n "${chroot}" ] ; then
	series=$(run-chroot "${chroot}" -- lsb_release -c -s 2>/dev/null)
	CHROOT=${chroot}
else
	# shellcheck disable=SC1091
	if [ -e debian/debian.env ] ; then
		. debian/debian.env
		series=$(dpkg-parsechangelog -l "${DEBIAN}"/changelog -S Distribution)
	else
		series=$(lsb_release -c -s 2>/dev/null)
	fi
	CHROOT=${series}
fi

#
# Determine architecture and cross-compilation
#

if [ -z "${arch}" ] ; then
	arch=$(dpkg-architecture -q DEB_BUILD_ARCH)
fi

if [ "${arch}" != "$(dpkg-architecture -q DEB_BUILD_ARCH)" ] ; then
	ARCH=$(dpkg-architecture -a "${arch}" -q DEB_HOST_ARCH_CPU 2>/dev/null)
	CROSS_COMPILE=$(dpkg-architecture -a "${arch}" -q DEB_HOST_GNU_TYPE 2>/dev/null)-

	pr_info "Cross-compilation for: ${ARCH}"
	export ARCH CROSS_COMPILE
fi

#
# Set exports
#

if [ -n "${buildd}" ] ; then
	KBUILD_OUTPUT=buildd/${buildd}
else
	KBUILD_OUTPUT=buildd/${series}
fi
mkdir -p "${KBUILD_OUTPUT}"

pr_info "Use kernel build output directory: ${KBUILD_OUTPUT}"
export KBUILD_OUTPUT

#
# Process the command
#

case "${cmd}" in
	config)
		case "${flavor}" in
			menu)
				run_chroot make menuconfig
				;;

			generic|raspi|*config)
				case "${flavor}" in
					generic|raspi)
						pr_info "Generate Ubuntu config (${arch}, ${flavor})"
						rm -rf CONFIGS
						run_chroot fakeroot debian/rules clean
						run_chroot debian/rules genconfigs || true

						cp CONFIGS/"${arch}"-config.flavour."${flavor}" "${KBUILD_OUTPUT}"/.config
						;;
					*)
						pr_info "Generate kernel config (${arch}, ${flavor})"
						run_chroot make "${flavor}"
						;;
				esac

				if [ ${module_subset} -eq 1 ] ; then
					pr_info "Enable only a subset of modules"

					if [ -z "${lsmod}" ] ; then
						lsmod=${KBUILD_OUTPUT}/bkd.modules
						echo "Module" > "${lsmod}"
					fi

					case "${min}" in
						"") ;;
						raspi|libvirt)
							minimal_modules_"${min}" >> "${lsmod}"
							;;
						*)
							pr_error "Invalid min option: ${min}"
							exit 1
							;;
					esac

					run_chroot make LSMOD="$(realpath -e "${lsmod}")" localmodconfig
				fi

				if [ ${syz} -eq 1 ] ; then
					pr_info "Set syzcaller configs"
					syz_configs >> "${KBUILD_OUTPUT}"/.config
				fi

				run_chroot make olddefconfig
				;;

			*)
				pr_error "Invalid config option: ${flavor}"
				exit 1
				;;
		esac
		;;

	make)
		# FIXME: Disable the build of the dbg package
		#sed -i -e 's/ CONFIG_DEBUG_INFO/ __BOGUS_CONFIG__/' scripts/package/mkdebian

		run_chroot make -j"${jobs}" "${@:-bindeb-pkg}"
		;;

	*)
		pr_error "Invalid command: ${1}"
		exit 1
		;;
esac
