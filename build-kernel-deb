#!/bin/bash -eu
#
# Build kernel Debian packages
#

function run_chroot()
{
	echo "-- Run in chroot (${CHROOT}):"
	echo "+ ${*}"
	run-chroot "${CHROOT}" -- "${@}"
}

function usage()
{
	cat <<EOF
Usage: $(basename "${0}") [-h] CMD [ARGS...]

Build kernel Debian packages.

Available commands:
  make             Build kernel Debian packages.
  menuconfig       Run config menu.
  ubuntuconfig     Use generic Ubuntu config.

Optional arguments:
  --arch ARCH      Debian package architecture.
  --chroot CHROOT  Use chroot CHROOT.
  -h, --help       Show this help text and exit.
  -jX              Number of jobs, default one per CPU.

Optional arguments for 'ubuntuconfig':
  --lsmod LSMOD    Build only modules listed in LSMOD.
EOF
}

arch=
chroot=
jobs=$(getconf _NPROCESSORS_ONLN)
lsmod=
cmd=

while [ ${#} -gt 0 ] ; do
	case "${1}" in
		--arch)
			shift
			arch=${1}
			;;
		--chroot)
			shift
			chroot=${1}
			;;
		-h|--help)
			usage
			exit
			;;
		-j[1-9]*)
			jobs=${1#-j}
			if [ -z "${jobs}" ] ; then
				shift
				jobs=${1}
			fi
			;;
		--lsmod)
			shift
			lsmod=${1}
			;;
		make|menuconfig|ubuntuconfig)
			cmd=${1}
			;;
		*)
			break
			;;
	esac
	shift
done

if [ -z "${cmd}" ] ; then
	usage
	exit 2
fi

#
# Determine the chroot and series
#

if [ -n "${chroot}" ] ; then
	series=$(run-chroot "${chroot}" -- lsb_release -c -s 2>/dev/null)
	CHROOT=${chroot}
else
	# shellcheck disable=SC1091
	if [ -e debian/debian.env ] ; then
		. debian/debian.env
		series=$(dpkg-parsechangelog -l "${DEBIAN}"/changelog -S Distribution)
	else
		series=$(lsb_release -c -s 2>/dev/null)
	fi
	CHROOT=${series}
fi

#
# Determine architecture and cross-compilation
#

if [ -z "${arch}" ] ; then
	arch=$(dpkg-architecture -q DEB_BUILD_ARCH)
fi

if [ "${arch}" != "$(dpkg-architecture -q DEB_BUILD_ARCH)" ] ; then
	ARCH=$(dpkg-architecture -a "${arch}" -q DEB_HOST_ARCH_CPU 2>/dev/null)
	CROSS_COMPILE=$(dpkg-architecture -a "${arch}" -q DEB_HOST_GNU_TYPE 2>/dev/null)-

	echo "-- Cross-compilation for: ${ARCH}"
	export ARCH CROSS_COMPILE
fi

#
# Set exports
#

KBUILD_OUTPUT=buildd/${series}

echo "-- Use kernel build output directory: ${KBUILD_OUTPUT}"
export KBUILD_OUTPUT

#
# Process the command
#

case "${cmd}" in
	ubuntuconfig)
		echo "-- Generate Ubuntu config"
		rm -rf CONFIGS
		run_chroot fakeroot debian/rules clean
		run_chroot debian/rules genconfigs || true

		mkdir -p "${KBUILD_OUTPUT}"
		cp CONFIGS/"${arch}"-config.flavour.generic "${KBUILD_OUTPUT}"/.config

		# Disable CONFIG_DEBUG_INFO
		sed -i '/CONFIG_DEBUG_INFO/d' "${KBUILD_OUTPUT}"/.config
		echo "# CONFIG_DEBUG_INFO is not set" >> "${KBUILD_OUTPUT}"/.config

		if [ -e "${lsmod}" ] ; then
			echo
			echo "-- Enable only local modules"
			run_chroot make LSMOD="$(realpath -e "${lsmod}")" localmodconfig
		else
			run_chroot make olddefconfig
		fi
		;;

	make)
		run_chroot make -j"${jobs}" "${@:-bindeb-pkg}"
		;;

	menuconfig)
		run_chroot make menuconfig
		;;

	*)
		echo "Invalid command: ${1}" >&2
		exit 1
		;;
esac
