#!/bin/bash -eu
#
# Build a Debian source package in a schroot
#

function run_chroot()
{
	local opts

	opts=("-c" "${CHROOT}")
	if schroot --list --all-sessions | grep -q "session:${CHROOT}" ; then
		opts+=("-r")
	fi
	set -x
	schroot "${opts[@]}" -- "${@}"
	set +x
}

function usage()
{
	cat <<EOF
Usage: build-source-deb [-c] [-h] [-m] [-o] [-r RELEASE] [-v VERSION]

Build a Debian source package in a schroot.

Optional arguments:
  -c, --clean            Clean the git repo before the build.
  -h, --help             Show this help text and exit.
  -m, --maintainer       Ignore maintainer email address (DEBEMAIL).
  -o, --orig             Include the original source tarball.
  -r, --release RELEASE  Use RELEASE rather than querying the changelog.
  -v, --version VERSION  Previous source package version.
EOF
}

clean=0
orig=0
release=
opts=()

while [ ${#} -gt 0 ] ; do
	case "${1}" in
		-c|--clean)
			clean=1
			;;
		-h|--help)
			usage
			exit
			;;
		-m|--maintainer)
			export DEBEMAIL=
			;;
		-o|--orig)
			orig=1
			;;
		-r|--release)
			shift
			release=${1}
			;;
		-v|--version)
			shift
			opts+=("-v${1}")
			;;
		*)
			echo "Invalid argument: ${1}" 2>/dev/null
			exit 2
			;;
	esac
	shift
done

if [ -d .git ] ; then
	if [ ${clean} -eq 1 ] && [ -n "$(git status --porcelain)" ] ; then
		git reset --hard HEAD
		git clean -dxf
	fi
	if [ -n "$(git status --porcelain)" ] ; then
		echo "Repo is unclean"
		exit 1
	fi
fi

if [ -z "${release}" ] ; then
	release=$(dpkg-parsechangelog -SDistribution)
	if [ "${release}" = "UNRELEASED" ] ; then
		echo "Release is UNRELEASED"
		exit 1
	fi
fi

CHROOT=cranky--${release}-amd64

run_chroot fakeroot ./debian/rules clean

opts+=(
	"-S"   # Build sources
	"-i"   # Exclude revision control files and directories (diff)
	"-I"   # Exclude revision control files and directories (tarball)
	"-uc"  # Don't sign .buildinfo and .changes files
	"-us"  # Don't sign the source package
	"-d"   # Don't check build dependencies
)

if [ ${orig} -eq 1 ] ; then
	opts+=("-sa")  # Include the original source tarball
fi

run_chroot dpkg-buildpackage "${opts[@]}" "${@}"
