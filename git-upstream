#!/bin/bash -eu

function out()
{
	local rc=$?

	trap - INT TERM EXIT HUP

	if [ ${rc} -ne 0 ] ; then
		pr_error "Script failed"
	fi

	exit "${rc}"
}

function pr_error() { echo -e "\033[31m${*}\033[0m" >&2 ; }
function pr_info()  { echo -e "\033[93m${*}\033[0m" ; }

function pr_banner()
{
	local line

	if [ -z "${__COLS:-}" ] ; then
		__COLS=$(tput cols)
	fi

	# Split long strings, extend the lines and print them
	echo
	while IFS= read -r line; do
		line=${line}$(printf "%${__COLS}s")
		echo -e "\033[45m${line::${__COLS}}\033[0m"
	done < <(echo "${*}" | fold -w$((__COLS - 2)))
}

function do_format_patch()
{
	local opts

	if [ ${#} -eq 0 ] ; then
		pr_error "Missing options for git-format-patch"
		exit 1
	fi

	opts=()
	if [ "${COVER_LETTER}" -ne 0 ] ; then
		opts+=("--cover-letter")
	fi
	if [ "${VERSION}" -ne 0 ] ; then
		opts+=("--subject-prefix=PATCH v${VERSION}")
	fi
	opts+=("${@}")

	rm -rf .outgoing
	mkdir .outgoing
	git format-patch -o .outgoing "${opts[@]}"
}

function do_check()
{
	if [ -e ./scripts/checkpatch.pl ] ; then
		./scripts/checkpatch.pl .outgoing/*.patch
	fi
}

function do_review()
{
	{
		echo
		for patch in .outgoing/*.patch ; do
			pr_banner "Patch ${patch#*/}"
			colordiff < "${patch}"
		done
	} | less
}

function do_send()
{
	local opts

#	if [ ${#} -eq 0 ] ; then
#		pr_error "Missing options for git-send-email"
#		exit 1
#	fi
	opts=()

	# Add --smtp-server=...
	account=$(grep -m1 '^From: ' .outgoing/*.patch | head -1)
	account=${account#*@}
	account=${account%%.*}
	opts+=("--smtp-server=${HOME}/bin/msmtp-${account}")

	# Add recipients
	if [ -e ./scripts/get_maintainer.pl ] ; then
		pr_info "Maintainers:"
		to=
		cc="linux-kernel@vger.kernel.org"
		while IFS=" " read -r email roles ; do
			printf "  %-40s %s\n" "${email}" "${roles}"
			case "${roles}" in
				"(maintainer"*|"(reviewer"*|"(open list"*|"(supporter"*|\
				"(moderated list"*)
					if [ "${email}" != "linux-kernel@vger.kernel.org" ] ; then
						to="${to},${email}"
					fi
					;;
				"(commit_signer"*|"(authored"*|"(added_lines"*|"(removed_lines"*|\
				"(odd fixer"*|"(blamed_fixes"*|*"blamed_fixes)")
					cc="${cc},${email}"
					;;
				*)
					echo
					pr_error "Unsupported roles: ${roles}" >&2
					exit 1
					;;
			esac
		done < <(./scripts/get_maintainer.pl --email --tree --no-git \
		         --git-fallback --m --r --no-n --l --multiline \
		         --pattern-depth=0 --remove-duplicates --no-rolestats --roles \
		         .outgoing/*.patch)

		if [ -z "${to}" ] ; then
			pr_error "No primary recipient found" >&2
			exit 1
		fi
		opts+=("--to=${to#,}" "--cc=${cc#,}")
		echo
	fi

	# Add --dry-run
	if [ "${FORCE}" -eq 0 ] ; then
		opts+=("--dry-run")
		pr_info "Use -f, --force to send the email"
	fi

	# Add additionally provided options
	opts+=("${@}")

	pr_banner "git send-email ${opts[*]} ./outgoing/*.patch"
	git send-email "${opts[@]}" .outgoing/*.patch
}

function usage()
{
	cat <<EOF
Usage: git-upstream [-c] [-v NUM] COMMAND [OPTS]

Helper script for managing upstream submissions.

Supported commands:
  format-patch [OPTS]  Create a patch (series) in .outgoing/.
  check                Check patches in .outgoing/.
  review               Review patches in .outgoing/.
  send [OPTS]          Send patches in .outgoing/.

  OPTS                 Additional options for the underlying git command.

Optional arguments:
  -c, --cover-letter   Add a cover letter.
  -f, --force          Force things.
  -h, --help           Show this help text.
  -v, --version NUM    The revision number of the patch to include in the
                       subject prefix.
EOF
}

# -----------------------------------------------------------------------------
# Main entry point

COVER_LETTER=0
FORCE=0
VERSION=0
cmd=

while [ ${#} -gt 0 ] ; do
	case ${1} in
		-c|--cover-letter)
			COVER_LETTER=1
			;;
		-f|--force)
			FORCE=1
			;;
		-h|--help)
			usage
			exit
			;;
		-v|--version)
			shift
			VERSION=${1}
			;;
		format-patch|check|review|send)
			cmd=${1//-/_}
			shift
			break
			;;
		*)
			pr_error "Invalid argument: ${1}" >&2
			exit 2
			;;
	esac
	shift
done

if [ -z "${cmd}" ] ; then
	usage
	exit 2
fi

trap out EXIT INT TERM HUP

do_"${cmd}" "${@}"
