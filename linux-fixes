#!/usr/bin/env python3

import gzip
import json
import os
import re
import sys

import click
import git

RE_FIXES = re.compile(r"^\s*Fixes:.*\b([0-9a-f]{8,})\b")


class Commit:
    sha = None
    subject = None
    fixes_tags = []
    fixes = []
    fixed_by = []
    level = 0

    def from_commit(self, commit, fixed_by=None):
        """Load the object data from the provided GitPython commit object"""
        self.sha = commit.hexsha
        self.subject = commit.summary

        if fixed_by:
            self.fixed_by = [fixed_by]
        else:
            for line in commit.message.split("\n"):
                m = RE_FIXES.match(line)
                if m:
                    self.fixes_tags.append(line)
                    try:
                        fixes_sha = m.group(1)
                        fixes_commit = commit.repo.commit(fixes_sha)
                        self.fixes.append(
                            Commit().from_commit(fixes_commit, fixed_by=self)
                        )
                    except git.BadName:
                        # Invalid SHA
                        pass
                    except ValueError:
                        # fatal: bad object <SHA>
                        pass
        return self

    def from_dict(self, cdict):
        """Load the object data from the provided dict"""
        self.sha = cdict["sha"]
        self.subject = cdict["subject"]
        self.fixes_tags = cdict["fixes-tags"]
        self.fixes = cdict["fixes"]
        self.fixed_by = cdict["fixed-by"]
        return self

    def to_dict(self):
        """Return the object data as a dict"""
        return {
            "sha": self.sha,
            "subject": self.subject,
            "fixes-tags": self.fixes_tags,
            "fixes": [c.sha for c in self.fixes],
            "fixed-by": [(c.sha if c else None) for c in self.fixed_by],
        }

    def does_fix(self, sha):
        """Check if this commit fixes the provided commit"""
        if len(sha) == 40:
            if sha in self.fixes:
                return True
            return False

        for f in self.fixes:
            if f.startswith(sha):
                return True
        return False

    def print(self, indent=0, color=None):
        """Pretty print the commit"""
        colors = {
            "red": "\033[31m",
            "green": "\033[32m",
            "yellow": "\033[33m",
        }
        cc = colors.get(color, "")
        nc = "" if cc == "" else "\033[0m"

        indent = " " * indent * self.level
        sys.stdout.write(f"{indent}{cc}{self.sha[:12]}{nc} {self.subject}\n")
        sys.stdout.flush()


class DataBase:
    def __init__(self):
        self.db = {}

    @property
    def head(self):
        return self.db.get("HEAD")

    @head.setter
    def head(self, value):
        self.db["HEAD"] = value

    def load(self, filename):
        if os.path.exists(filename):
            with gzip.open(filename, "rt", encoding="utf-8") as fh:
                self.db = json.load(fh)
        else:
            print(f"W: Database file does not exist: {filename}", file=sys.stderr)

    def save(self, filename):
        with gzip.open(filename, "wt", encoding="utf-8") as fh:
            json.dump(self.db, fh, ensure_ascii=False)

    def _add_commit(self, commit):
        sha = commit.sha
        if sha in self.db:
            cur = self.db[sha]
            new = commit.to_dict()
            for key in ["fixes-tags", "fixes", "fixed-by"]:
                cur[key] = list(set(cur[key] + new[key]))
            self.db[sha] = cur
        else:
            self.db[sha] = commit.to_dict()

    def add_commit(self, commit):
        # Add the commit itself plus any fixes commits
        for c in [commit] + commit.fixes:
            self._add_commit(c)

    def show_commit(self, sha, indent=4):
        """Print the commit with the provided SHA"""
        if len(sha) != 40:
            for key in self.db.keys():
                if key.startswith(sha):
                    sha = key
                    break
        print(json.dumps(self.db.get(sha, {}), indent=indent))

    def dump(self):
        print(json.dumps(self.db, indent=4))

    def fix_commits(self, sha, recursive=False, level=0):
        """Return the list of commits that fix the provided commit"""
        sha_list = []
        fix_list = []
        for key, val in self.db.items():
            if key == "HEAD":
                continue

            commit = Commit().from_dict(val)
            if commit.sha in sha_list or not commit.does_fix(sha):
                continue

            sha_list.append(commit.sha)
            commit.level = level
            fix_list.append(commit)

            if recursive:
                for fix in self.fix_commits(
                    commit.sha, recursive=True, level=level + 1
                ):
                    if fix.sha not in sha_list:
                        fix_list.append(fix)

        return fix_list


@click.group()
@click.argument("fixes-file")
@click.pass_context
def cli(ctx, fixes_file):
    print(f"fixes-file: {fixes_file}")
    ctx.obj = {"fixes_file": fixes_file}


@cli.command()
@click.argument("repo-dir")
@click.argument("branch", default="main")
@click.pass_context
def add(ctx, repo_dir, branch):
    """Find commits with 'Fixes:' tags in the provided git repository and add them to the provided fixes file."""
    fixes_file = ctx.obj["fixes_file"]
    db = DataBase()
    db.load(fixes_file)

    if db.head:
        rev_range = f"{db.head}..{branch}"
        reverse = False
    else:
        rev_range = branch
        reverse = True

    print(f"repo-dir:   {repo_dir}")
    print(f"rev-range:  {rev_range}")

    repo = git.Repo(repo_dir)
    for c in repo.iter_commits(rev_range, reverse=reverse, max_parents=1):
        commit = Commit().from_commit(c)
        commit.print()
        if commit.fixes_tags:
            db.add_commit(commit)

    # Store the current HEAD
    db.head = repo.commit(branch).hexsha

    # Save the DB back
    db.save(fixes_file)


@cli.command()
@click.argument("commit")
@click.pass_context
def show(ctx, commit):
    """Show the provided commit."""
    fixes_file = ctx.obj["fixes_file"]
    db = DataBase()
    db.load(fixes_file)
    db.show_commit(commit)


@cli.command()
@click.pass_context
def dump(ctx):
    """Dump the fixes file to stdout."""
    fixes_file = ctx.obj["fixes_file"]
    db = DataBase()
    db.load(fixes_file)
    db.dump()


@cli.command()
@click.option("--indent", type=int, default=0)
@click.option("--recursive/--no-recursive", default=True)
@click.argument("commit")
@click.pass_context
def fixes(ctx, indent, recursive, commit):
    """List commits that fix the provided commit."""
    fixes_file = ctx.obj["fixes_file"]
    db = DataBase()
    db.load(fixes_file)

    for fix_commit in db.fix_commits(commit, recursive=recursive):
        fix_commit.print(indent=indent)


@cli.command(context_settings={"ignore_unknown_options": True})
@click.option("--indent", type=int, default=0)
@click.option("--recursive/--no-recursive", default=True)
@click.argument("args", nargs=-1)
@click.pass_context
def log(ctx, indent, recursive, args):
    """List commits and their fixes in the provided rev range."""
    fixes_file = ctx.obj["fixes_file"]
    if not args:
        args = ["HEAD"]

    if "---" in args:
        idx = args.index("---")
        rev_range = args[:idx]
        paths = args[(idx + 1) :]
    else:
        rev_range = args
        paths = []

    print(f"rev-range: {rev_range}")
    print(f"paths:     {paths}")

    db = DataBase()
    db.load(fixes_file)

    sha_list = []

    repo = git.Repo(".")
    for c in repo.iter_commits(rev_range, paths=paths):
        commit = Commit().from_commit(c)

        sha_list.append(commit.sha)

        # Color-print the current commit
        color = "yellow"
        for sha in commit.fixed_by:
            color = "green"
            if sha not in sha_list:
                color = "red"
                break
        commit.print(color=color)

        for fix_commit in db.fix_commits(commit.sha, recursive=recursive, level=1):
            # Color-print the fix commit
            if fix_commit.sha in sha_list:
                color = "green"
            else:
                color = "red"
            fix_commit.print(indent=indent, color=color)


if __name__ == "__main__":
    sys.argv = ["---" if a == "--" else a for a in sys.argv]
    cli()  # pylint: disable=E1120
