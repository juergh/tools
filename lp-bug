#!/usr/bin/env python3
#
# LP bug management
#

import os
import sys

import click
from launchpadlib.launchpad import Launchpad

KERNEL_VERSION = {
    "artful": "4.13",
    "bionic": "4.15",
    "cosmic": "4.18",
    "dapper": "2.6.y",
    "disco": "5.0",
    "edgy": "2.6.y",
    "eoan": "5.3",
    "feisty": "2.6.y",
    "focal": "5.4",
    "groovy": "5.8",
    "gutsy": "2.6.y",
    "hardy": "2.6.y",
    "hirsute": "5.11",
    "impish": "5.13",
    "intrepid": "2.6.y",
    "jammy": "5.15",
    "jaunty": "2.6.y",
    "karmic": "2.6.y",
    "kinetic": "5.19",
    "lucid": "2.6.y",
    "lunar": "6.2",
    "mantic": "6.5",
    "maverick": "2.6.y",
    "natty": "2.6.y",
    "noble": "6.8",
    "oneiric": "3.0",
    "oracular": "6.11",
    "plucky": "6.11",
    "precise": "3.2",
    "quantal": "3.5",
    "raring": "3.8",
    "saucy": "3.11",
    "trusty": "3.13",
    "utopic": "3.16",
    "vivid": "3.19",
    "wily": "4.2",
    "xenial": "4.4",
    "yakkety": "4.8",
    "zesty": "4.10",
}


def show(item):
    print(item)
    print("attributes:  {}".format(sorted(item.lp_attributes)))
    print("collections: {}".format(sorted(item.lp_collections)))
    print("entries:     {}".format(sorted(item.lp_entries)))
    print("operations:  {}".format(sorted(item.lp_operations)))

    for a in item.lp_attributes:
        print(f"  {a} = {getattr(item, a)}")


def lp_login():
    return Launchpad.login_with("tools", "production", version="devel")


def mark_as_duplicate(lp, master, bug, dry_run=False):
    pre_comment = \
        "Thank you for taking the time to report this bug and helping to make Ubuntu better. " + \
        f"This particular bug has already been reported and is a duplicate of bug {master}, " + \
        "so it is being marked as such. "
    post_comment = " Please continue to report any other bugs you may find."

    if master == 2068107:
        comment = \
            "The problem you're encountering is due to the presence of an unsupported DKMS " + \
            "module that causes the installation or upgrade of kernel packages to fail. You " + \
            "need to remove this unsupported DKMS module. Please look at the other bug " + \
            "report for instructions and additional information."
    else:
        comment = \
            "Please look at the other bug report to see if there is any missing information " + \
            "that you can provide, or to see if there is a workaround for the bug. " + \
            "Additionally, any further discussion regarding the bug should occur in the " + \
            "other report."

    lp_master = lp.bugs[master]
    lp_bug = lp.bugs[bug]

    comment = pre_comment + comment + post_comment

    print(f"LP: #{bug} -- {lp_bug.title}")
    print()
    print(comment)
    print()

    if dry_run:
        print("(dry-run) Exiting, not modifying bug")
        return

    # Copy release tags from duplicates to the master bug
    ubuntu = lp.distributions["ubuntu"]
    release_tags = []
    for series in ubuntu.series:
        if series.status not in ("Active Development", "Current Stable Release", "Supported"):
            continue
        release_tags.append(series.name)
    dupe_tags = set(lp_bug.tags)
    master_tags = lp_master.tags
    missing_tags = dupe_tags.difference(master_tags)
    for tag in missing_tags:
        if tag in release_tags:
            master_tags.append(tag)
    lp_master.lp_save()

    for task in lp_bug.bug_tasks:
        task.status = "Confirmed"
        task.lp_save()
    lp_bug.newMessage(content=comment)
    lp_bug.duplicate_of = lp_master
    lp_bug.lp_save()
    print("Modified bug")


@click.group()
def main():
    pass


@main.command()
@click.argument("bug")
@click.option("--dry-run", is_flag=True)
def duplicate_dkms(bug, dry_run):
    """Mark a bug as a duplicate of LP: #2068107 (DKMS build failure)."""
    lp = lp_login()
    mark_as_duplicate(lp, 2068107, bug, dry_run=dry_run)

@main.command()
@click.argument("bug")
@click.argument("series")
@click.option("--dry-run", is_flag=True)
def wontfix_eol(bug, series, dry_run):
    """Close a bug as \"Won't Fix\" due to EOL."""
    kernel = KERNEL_VERSION.get(series)
    if not kernel:
        print(f"Unsupported series: {series}", file=sys.stderr)
        sys.exit(1)

    distro = os.popen(f"ubuntu-distro-info -a -f | grep -i ' \"{series} '", "r").read().strip()
    distro = distro.replace(' "', " (").replace('"', ")")

    comment = \
        f"{distro} with kernel {kernel} has reached end of life, so this bug will not be " + \
        "fixed for that specific release. Please file a new bug if this issue still exists " + \
        "in a supported release."

    lp = lp_login()
    lp_bug = lp.bugs[bug]

    print(f"LP: #{bug} -- {lp_bug.title}")
    print()
    print(comment)
    print()

    if dry_run:
        print("(dry-run) Exiting, not modifying bug")
        return

    for task in lp_bug.bug_tasks:
        task.status = "Won't Fix"
        task.lp_save()
    lp_bug.newMessage(content=comment)
    lp_bug.lp_save()
    print("Modified bug")


if __name__ == "__main__":
    main()
