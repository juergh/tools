#!/usr/bin/env python3
#
# Show Ubuntu tag information
#

import logging as log
import re

import click
import git

RE_TAG = re.compile(r"^Ubuntu(-unstable)?-\d+\.\d+\.\d+-\d+\.\d+$")


def release_from_line(line):
    """Return source/version/series release string from a debian/changelog release line"""
    source, version, series = line.translate({ord(i): None for i in "();"}).split(" ")[
        0:3
    ]
    series = series.split("-")[0]  # Fix series like jaunty-security
    return f"{source}/{version}/{series}"


def tagname_from_release(release):
    """Return the tagname from a source/version/series release string"""
    source, version, _ = release.split("/")
    if source.startswith("linux-source-2.6"):
        prefix = ""
    else:
        prefix = source.removeprefix("linux")
    return f"Ubuntu{prefix}-{version}"


def releases_from_tag(tag, cache=None):
    """Return the list of release strings from debian/changelog of the provided tag"""
    # Check the tag name
    if not RE_TAG.match(tag.name):
        log.info(f"Invalid tag name: {tag.name}")
        return None

    # Check the cache first
    if cache:
        cached = cache.get(tag.name)
        if cached:
            return cached

    # Get the changelog directory
    try:
        debian = tag.repo.git.show(f"{tag}:debian/debian.env").splitlines()[0]
        debian = debian.split("=")[1]
    except git.exc.GitCommandError:
        debian = "debian"

    # Get the changelog content
    try:
        changelog = tag.repo.git.show(f"{tag}:{debian}/changelog").splitlines()
    except git.exc.GitCommandError:
        changelog = None
    if not changelog:
        log.info("Debian changelog not found")
        return None

    # Get the release info from the changelog
    release = release_from_line(changelog[0])

    # Check the source name
    source, _, _ = release.split("/")
    if not (
        source in ("linux", "linux-unstable") or source.startswith("linux-source-2.6")
    ):
        log.info(f"Invalid source name: {source}")
        return None

    # Check the tag name
    tag_name = tagname_from_release(release)
    if tag.name != tag_name:
        log.info(f"Tag name mismatch: {tag.name} != {tag_name}")
        return None

    # Pull the releases from the changelog
    releases = []
    for line in changelog:
        if line.startswith("linux"):
            releases.append(release_from_line(line))

    return releases


class TagError(Exception):
    pass


class TagCache:
    def __init__(self):
        self.tags = {}

    def add(self, tag, exclusive=False):
        if exclusive and tag.name in self.tags:
            raise TagError(f"Tag exists already in the cache: {tag}")
        self.tags[tag.name] = tag

    def get(self, tag_name):
        return self.tags.get(tag_name)


class UbuntuTag:
    def __init__(self, tag, releases):
        self.tag = tag
        self.releases = releases

        self.name = tag.name
        self.release = releases[0]

        # Find the previous existing release
        self.prev_release = "None/None/None"
        for release in self.releases[1:]:
            tag_name = tagname_from_release(release)
            try:
                tag.repo.git.rev_parse(tag_name)
                self.prev_release = release
                break
            except git.exc.GitCommandError:
                pass

    def __repr__(self):
        return f"{self.tag.name} -- {self.release} -- {self.prev_release}"

    @classmethod
    def from_tag(cls, tag, cache=None):
        releases = releases_from_tag(tag, cache=cache)
        if not releases:
            return None
        return cls(tag, releases)


@click.group()
@click.option("--debug", help="Enable debug messages.", is_flag=True)
@click.option("--verbose", help="Enable verbose messages.", is_flag=True)
def cli(debug, verbose):
    if debug:
        log.basicConfig(level=log.DEBUG)
    elif verbose:
        log.basicConfig(level=log.INFO)


@cli.command(name="list")
def _list():
    """List Ubuntu main kernel tags."""
    cache = TagCache()
    repo = git.Repo(".")
    for repo_tag in repo.tags:
        ubuntu_tag = UbuntuTag.from_tag(repo_tag, cache=cache)
        if ubuntu_tag:
            cache.add(ubuntu_tag, exclusive=True)
            print(ubuntu_tag)


@cli.command()
@click.argument("tag")
def show(tag):
    """Show Ubuntu main kernel tag."""
    repo = git.Repo(".")
    repo_tag = repo.tag(tag)
    ubuntu_tag = UbuntuTag.from_tag(repo_tag)
    print(ubuntu_tag)


if __name__ == "__main__":
    cli()
