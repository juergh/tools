#!/bin/bash -eu
#
# Helper script for managing Debian/Ubuntu package git repos
#

function out()
{
	local rc=$?

	trap - INT TERM EXIT HUP

	if [ ${rc} -ne 0 ] ; then
		pr_error "Script failed"
	fi

	exit "${rc}"
}

function pr_error()
{
	echo -e "\033[31m${*}\033[0m" 1>&2
}

function pr_warn()
{
	echo -e "\033[33m${*}\033[0m"
}

function do_colordiff()
{
    local line color

    while IFS= read -r line ; do
        color="\e[0m"  # no color
        case "${line}" in
            "-"*)     color="\e[31m"      ;;  # red
            "+"*)     color="\e[32m"      ;;  # green
            "!"*)     color="\e[33m"      ;;  # brown
            "@@"*)    color="\e[36m"      ;;  # cyan
            "diff "*) color="\e[1m\e[36m" ;;  # bold cyan
        esac
        echo -ne "${color}"
        echo -n "${line}"
        echo -e "\e[0m"
    done
}

function set_globals()
{
	local remote repo_name series

	remote=$(git remote get-url origin 2>/dev/null || true)
	repo_name=${remote##*/}
	repo_name=${repo_name%.git}

	# Defaults
	REPO=
	CHANGELOG=
	SOURCE=
	DERIVATIVE=
	SRU=0
	TARGET=()
	TOKEN=()
	ESM=0
	PRIVATE=0
	TO=${KERNEL_PUBLIC_EMAIL}

	# Figure out what type of repo this is
	if [ -e debian/debian.env ] ; then
		REPO="ubuntu-kernel (main)"
		# shellcheck disable=SC1091
		. debian/debian.env
		CHANGELOG=${DEBIAN}/changelog
		SOURCE=$(dpkg-parsechangelog -l "${CHANGELOG}" -S Source)
		DERIVATIVE=${SOURCE#linux}
		DERIVATIVE=${DERIVATIVE#-}
		SRU=1
	elif [ -e debian/changelog ] ; then
		CHANGELOG=debian/changelog
		SOURCE=$(dpkg-parsechangelog -l "${CHANGELOG}" -S Source)
		case "${SOURCE}" in
			linux-meta*|linux-signed*|linux-restricted-modules*)
				REPO="ubuntu-kernel (dependent)"
				DERIVATIVE=${SOURCE#linux}
				DERIVATIVE=${DERIVATIVE#-}
				SRU=1
				;;
		esac
	elif [ -e kernel.yaml ] ; then
		REPO="kernel-snap"
		SRU=1
		# FIMXE
		# TARGET=
	fi

	if [ -z "${REPO}" ] ; then
		pr_error "Unsupported repo"
		exit 1
	fi

	# Unstable is special
	case "${DERIVATIVE}" in
		unstable)
			DERIVATIVE=
			SRU=0
			TARGET=("Unstable")
			;;
		*-unstable)
			DERIVATIVE=${DERIVATIVE%-unstable}
			SRU=0
			TARGET=("Unstable:${DERIVATIVE}")
			;;
	esac

	# Determine the series
	SERIES=${OPT_SERIES}
	if [ -n "${SERIES}" ] && [ -n "${CHANGELOG}" ] ; then
		SERIES=$(dpkg-parsechangelog -l "${CHANGELOG}" -S Distribution)
		if [ "${SERIES}" = "UNRELEASED" ] ; then
			SERIES=$(dpkg-parsechangelog -l "${CHANGELOG}" -S Distribution \
				  -o 1 -c 1)
		fi
	fi

	# ESM?
	case "${SERIES}" in
		trusty|xenial|bionic)
			# shellcheck disable=SC2034
			ESM=1
			TO=${KERNEL_ESM_EMAIL}
			;;
	esac

	# Private?
	if [ "${REPO}" != "kernel-snap" ] ; then
		case "${remote}" in
			*~canonical-kernel-*)
				# shellcheck disable=SC2034
				PRIVATE=1
				TO=${KERNEL_ESM_EMAIL}
				;;
		esac
	fi

	# Set the target
	if [ ${#TARGET[@]} -eq 0 ] && [ -n "${SERIES}" ] ; then
		series=${SERIES:0:1}
		series=${series^^}
		if [ -n "${DERIVATIVE}" ] ; then
			TARGET=("${series}:${DERIVATIVE}")
		else
			TARGET=("${series}")
		fi
	fi

	# Options that override globals
	if [ ${#OPT_TARGET[@]} -gt 0 ] ; then
		TARGET=("${OPT_TARGET[@]}")
	fi
}

function print_globals()
{
	local var

	for var in REPO CHANGELOG SERIES SOURCE DERIVATIVE ESM PRIVATE SRU \
	           COVER_LETTER DRY_RUN TO IN_REPLY_TO a_TARGET a_TOKEN SUBJECT_PREFIX ; do
		if [ "${var#a_}" != "${var}" ] ; then
			declare -n vars=${var#a_}
			printf "%-14s : %s\n" "${var#a_}" "${vars[*]}"
		else
			printf "%-14s : %s\n" "${var}" "${!var}"
		fi
	done
	echo
}

function query_lp_bug()
{
	local bug=${1} attr=${2}

	curl -s -S --get "https://api.launchpad.net/devel/bugs/${bug}" | \
		python3 -c "\
import json,sys
obj = json.load(sys.stdin)
print(obj['${attr}'])
"
}

function fill_in_cover_letter()
{
	local cves buglinks issue subject buglink bug

	readarray -t cves < <(grep -hE "^CVE-[0-9]{4}-[0-9]*$" .outgoing/*.patch | sort -u)
	readarray -t buglinks < <(grep -h '^BugLink: http' .outgoing/*.patch)

	case "${#cves[@]}-${#buglinks[@]}" in
		0-0)
			pr_warn "Found no CVE tags and no BugLinks, can't fill in cover letter"
			return
			;;
		*-0)
			issue=cve
			subject=$(printf "%s," "${cves[@]}")
			subject=${subject%,}
			;;
		0-*)
			buglink=${buglinks[0]}
			buglink=${buglink#BugLink: }
			if [ "${buglink%% *}" = "${buglink}" ] ; then
				issue=bug
				# Try to query launchpad
				bug=${buglink##*/}
				subject="$(query_lp_bug "${bug}" title) (LP: #${bug})"
			else
				issue=private
				# Buglink contains a subject, so must be a private bug
				subject=${buglink#* }
				subject=${subject:1:-1}
			fi
			;;
		*)
			pr_warn "Found CVE tags and BugLinks, don't know how to fill in cover letter"
			return
			;;
	esac

	while IFS= read -r line ; do
		case "${line}" in
			*"*** BLURB HERE ***"*)
				case "${issue}" in
					cve)
						printf "https://ubuntu.com/security/%s\n" "${cves[@]}"
						echo
						echo "[ Impact ]"
						echo
						echo "*** BLURB HERE ***"
						echo
						echo "[ Test Case ]"
						echo
						echo "*** BLURB HERE ***"
						echo
						echo "[ Where Problems Could Occur ]"
						echo
						echo "*** BLURB HERE ***"
						;;
					bug)
						printf "%s\n" "${buglinks[@]}" | sort -u
						echo
						query_lp_bug "${bug}" description
						;;
					*)
						printf "%s\n" "${buglinks[@]}" | sort -u
						echo
						echo "*** PRIVATE BLURB HERE ***"
						;;
				esac
				;;
			*"*** SUBJECT HERE ***"*)
				echo "${line%\*\*\* SUBJECT*}${subject}"
				;;
			*)
				echo "${line}"
				;;
		esac
	done < .outgoing/0000-cover-letter.patch > .outgoing/cl.new
	mv .outgoing/cl.new .outgoing/0000-cover-letter.patch
}

function do_format_patch()
{
	local patch opts

	opts=()
	# Additional options
	if [ "${COVER_LETTER}" -eq 1 ] ; then
		opts+=("--cover-letter")
		opts+=("--thread=shallow")
	fi
	if [ -n "${SUBJECT_PREFIX}" ] ; then
		opts+=("--subject-prefix=${SUBJECT_PREFIX}")
	fi
	if [ -n "${IN_REPLY_TO}" ] ; then
		opts+=("--in-reply-to=${IN_REPLY_TO}")
		opts+=("--thread")
	fi

	# Create the patchset
	rm -rf .outgoing/
	git format-patch -o .outgoing/ "${opts[@]}" "${@}"

	# Check for
	#   - BugLink or CVE tags
	#   - Requested-by tags for IBM-GT patches
	for patch in .outgoing/*.patch ; do
		if [ "${patch}" = ".outgoing/0000-cover-letter.patch" ] ; then
			continue
		fi
		if ! grep -m1 -qP "^(BugLink: https://.*|CVE-[0-9]{4}-[0-9]*)$" \
			 "${patch}" ; then
			pr_warn "Missing BugLink and/or CVE tag in ${patch#*/}"
		fi
		if [ "${DERIVATIVE}" = "ibm-gt" ] && \
			   ! grep -m1 -qP '^Requested-by: .*@ibm' "${patch}" ; then
			pr_warn "Missing Requested-by tag in ${patch#*/}"
		fi
	done

	# Try to fill in the cover letter
	if [ -f .outgoing/0000-cover-letter.patch ] ; then
		fill_in_cover_letter
	fi

	if [ "${DRY_RUN}" -eq 1 ] ; then
		echo
		echo "git format-patch -o .outgoing/ ${opts[*]} ${*}"
		for patch in .outgoing/*.patch ; do
			pr_warn "Patch ${patch#*/}"
			colordiff < "${patch}"
		done
	fi
}

function do_send_email()
{
	local opts

	# git send-email options
	opts=(
		"--suppress-cc=all"
		"--to=${TO}"
	)
	if [ "${DRY_RUN}" -eq 1 ] ; then
		opts+=("--dry-run")
	fi

	# Just in case
	if git config sendemail.to 2>/dev/null ; then
		git config --unset sendemail.to
	fi

	git send-email "${opts[@]}" .outgoing/*.patch
}

function do_send_patch()
{
	local commit=${1:-HEAD}

	do_format_patch "${commit}" -1
	do_send_email
}

function do_request_pull()
{
	local start=${1:-} end=${2:-HEAD}
	local refs_heads commit
	local branch decorate remote remote_branch remote_url
	local buglink url bug subject blurb name email

	if [ -z "${start}" ] ; then
		# Get the start commit for this pull request
		readarray -t refs_heads < <(git for-each-ref --format="%(objectname)" \
										refs/heads)
		while IFS= read -r commit ; do
			if printf "%s\n" "${refs_heads[@]}" | grep -q "${commit}" ; then
				start=${commit}
				break
			fi
		done < <(git log --format="%H" -1000 HEAD~1)
		if [ -z "${start}" ] ; then
			pr_error "Start commit for pull request not found"
			exit 1
		fi
	fi

	# FIXME --------------------------------------------------------

	branch=$(git rev-parse --abbrev-ref "${end}")

	decorate=$(git log --pretty=%D --decorate-refs='refs/remotes/*' "${end}" -1)

	remote=${decorate%%/*}
	remote_branch=${decorate#*/}
	remote_url="$(git config "remote.${remote}.url")"

	#branch=$(git rev-parse --abbrev-ref "${end}")
	#remote_branch=${SERIES}/${SOURCE}/${branch}

	#case "${SOURCE}" in
	#	linux-meta*)   remote_name=linux-meta ;;
	#	linux-signed*) remote_name=linux-signed ;;
	#	linux*)        remote_name=linux ;;
	#esac

	#remote_url="https://git.launchpad.net/~juergh/+git/${remote_name}"

	# Get the remote where we pushed this branch to
	#commit=$(git rev-parse "${end}")
	#branch=$(git rev-parse --abbrev-ref "${end}")
	#readarray -t remotes < <(git for-each-ref refs/remotes | \
	#							 grep "^${commit}.*/${branch}$" || true)
	#if [ ${#remotes[@]} -eq 0 ] ; then
	#	pr_error "Remote of branch '${branch}' not found"
	#	exit 1
	#elif [ ${#remotes[@]} -gt 1 ] ; then
	#	pr_error "Error: Multiple remotes of branch '${branch}' found"
	#	exit 1
	#fi
	#remote=${remotes[0]#*refs/remotes/}
	#remote=${remote%%/*}

	# The name of the remote branch
	#remote_branch=${remotes[0]#*refs/remotes/*/}

	#remote_url="$(git config "remote.${remote}.url")

	# FIXME --------------------------------------------------------

	# Determine the subject for this pull request
	buglink=$(git log --format=%b "${end}" -2 | grep -m1 '^BugLink: ' || true)
	buglink=${buglink#BugLink: }
	url=${buglink%% *}
	if [ -z "${url}" ] ; then
		subject="FIXME"
		blurb="FIXME"
	elif [ "${url}" = "${buglink}" ] ; then
		# Try to query launchpad
		bug=${buglink##*/}
		subject="$(query_lp_bug "${bug}" title) (LP: #${bug})"
		blurb=$(query_lp_bug "${bug}" description)
	else
		# Buglink contains a subject, so must be a private bug
		subject=${buglink#* }
		subject=${subject:1:-1}
		blurb="FIXME"
	fi

	name=$(git config user.name)
	email=$(git config user.email)

	cat <<EOF
From $(git log --format=%H -1) Mon Sep 17 00:00:00 2001
From: ${name} <${email}>
Date: $(date -R)
Subject: [${SUBJECT_PREFIX}] ${subject}
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

EOF
	git log --format=%b "${start}".."${end}" | grep '^BugLink: ' | sort -r -u
	if [ -n "${blurb}" ] ; then
		echo
		echo "${blurb}"
	fi
	cat <<EOF

Signed-off-by: ${name} <${email}>

--------

EOF
	git request-pull "${start}" "${remote_url}" \
		"${branch}":"${remote_branch}" | \
		sed 's,git+ssh://.*git\.,https://git.,'
}

function usage()
{
	cat <<EOF
Usage: git-deb [-c] [-d] [-h] [-i MSG_ID] [-r TARGET] [-s] [-t TOKEN] [-ns]
               [-v NUM] COMMAND [OPTS]

Helper script for managing Ubuntu package git repos.

Supported commands:
  i,  info                        Show repo information.
  fp, format-patch [OPTS]         Create a patch (series). OPTS are additional
                                  options for 'git format-patch'.
  se, send-email [OPTS]           Send patches in .outgoing. OPTS are additional
                                  options for 'git send-email'.
  sp, send-patch [COMMIT]         Send the commit COMMIT as a patch email. If
                                  COMMIT is not provided, defaults to HEAD.
  rp, request-pull [START] [END]  Create a pull request.

Optional arguments:
  -c, --cover-letter          Add a cover letter.
  -d, --dry-run               Don't send the email.
  -h, --help                  Show this help text.
  -i, --in-reply-to MSG_ID    Reply to the given MSG_ID.
  -r, --target TARGET         The target (series[:source]) to include in the
                              subject prefix. Can be provided multiple times.
  -s, --resend                Add RESEND to the subject prefix.
  --series SERIES             Use series SERIES.
  -t, --token TEXT            Add an additional token [TEXT] to the subject
                              prefix. Can be provided multiple times.
  -ns, --no-sru               Don't include [SRU] in the subject prefix.
  -v, --version NUM           The revision number of the patch to include in
                              the subject prefix.
EOF
}

# -----------------------------------------------------------------------------
# Main entry point

if ! [ -d .git ] ; then
	pr_error "Not a git repo"
	exit 1
fi

declare -A cmd_map=(
	["i"]="info"
	["info"]="info"
	["fp"]="format_patch"
	["format-patch"]="format_patch"
	["se"]="send_email"
	["send-email"]="send_email"
	["sp"]="send_patch"
	["send-patch"]="send_patch"
	["rp"]="request_pull"
	["request-pull"]="request_pull"
)

COVER_LETTER=0
DRY_RUN=0
IN_REPLY_TO=
resend=0
version=0
cmd=

OPT_SERIES=
OPT_TARGET=()

while [ ${#} -gt 0 ] ; do
	case ${1} in
		-c|--cover-letter)
			COVER_LETTER=1
			;;
		-d|--dry-run)
			DRY_RUN=1
			;;
		-h|--help)
			usage
			exit
			;;
		-i|--in-reply-to)
			shift
			IN_REPLY_TO=${1}
			;;
		-r|--target)
			shift
			OPT_TARGET+=("${1}")
			;;
		-s|--resend)
			resend=1
			;;
		--series)
			shift
			OPT_SERIES=${1}
			;;
		--to)
			shift
			TO="${1}"
			;;
		-t|--token)
			shift
			TOKEN+=("${1}")
			;;
		-ns|--no-sru)
			SRU=0
			;;
		-v|--version)
			shift
			version=${1}
			;;
		i|info|fp|format-patch|se|send-email|sp|send-patch|rp|request-pull)
			cmd=${cmd_map[${1}]}
			shift
			break
			;;
		*)
			pr_error "Invalid argument: ${1}" >&2
			exit 2
			;;
	esac
	shift
done

if [ -z "${cmd}" ] ; then
	usage
	exit 2
fi

# Set the default globals
set_globals

trap out EXIT INT TERM HUP

patch_pull=PATCH
if [ "${cmd}" = "request_pull" ] ; then
	patch_pull=PULL
fi

# Set the default email subject prefix
SUBJECT_PREFIX=
if [ "${SRU}" -eq 1 ] ; then
	SUBJECT_PREFIX="${SUBJECT_PREFIX}][SRU"
fi
for target in "${TARGET[@]}" ; do
	SUBJECT_PREFIX="${SUBJECT_PREFIX}][${target}"
done
for token in "${TOKEN[@]}" ; do
	SUBJECT_PREFIX="${SUBJECT_PREFIX}][${token}"
done
SUBJECT_PREFIX="${SUBJECT_PREFIX}][${patch_pull}"
if [ "${version}" -gt 0 ] ; then
	SUBJECT_PREFIX="${SUBJECT_PREFIX} v${version}"
fi
if [ "${resend}" -eq 1 ] ; then
	SUBJECT_PREFIX="${SUBJECT_PREFIX} resend"
fi
SUBJECT_PREFIX=${SUBJECT_PREFIX#][}

print_globals >&2

if [ "${cmd}" = "info" ] ; then
	exit
fi

do_"${cmd}" "${@}"
