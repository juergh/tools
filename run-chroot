#!/bin/bash -eu
#
# Run a chroot session. Create it first, if it doesn't exist
#

function pr_info()
{
	echo -e "\033[33m${*}\033[0m"
}

function pr_error()
{
	echo -e "\033[31m${*}\033[0m" 1>&2
}

function session_exists()
{
	schroot -l --all | grep -q "^session:${1}$"
}

function chroot_exists()
{
	schroot -l --all | grep -q "^chroot:${1}$"
}

function hostarch()
{
	case "${1#*-}" in
		fedora*|centos*)
			dpkg-architecture -q DEB_HOST_GNU_CPU
			;;
		*)
			dpkg-architecture -q DEB_HOST_ARCH
			;;
	esac
}

function create_chroot()
{
	local chroot=${1}

	pr_info "Create new chroot ${chroot}"

	if ! grep -s '^/home' '/etc/schroot/sbuild/fstab' >/dev/null; then
		cat <<EOF | sudo tee --append '/etc/schroot/sbuild/fstab' >/dev/null
# Allow use of /home for run-chroot
/home           /home           none    rw,bind         0       0
EOF
	fi

	mk-sbuild --arch="${chroot#*-}" "${chroot%-*}"
}

function create_session()
{
	local session=${1} chroot=${2}

	pr_info "Create new session ${session}"

	schroot -b -n "${session}" -c "${chroot}"

	# Fixup session:
	#   - upgrade and install packages
	#   - add sudoer
	#   - create /etc/hosts
	#   - generate locales
	cat << EOF | schroot -u root -r -c "${session}" -- bash -
if sh -c 'command -v apt-get' &> /dev/null ; then
    apt-get update
    apt-get -y dist-upgrade
    apt-get -y install sudo locales
fi

echo "${USER} ALL = NOPASSWD: ALL" > /etc/sudoers.d/"${USER}"
chmod 644 /etc/sudoers.d/"${USER}"

if ! [ -e /etc/hosts ] ; then
    cat << __EOF__ > /etc/hosts
127.0.0.1 localhost
127.0.1.1 $(hostname)
__EOF__
fi

locale-gen en_US.UTF-8
locale-gen C.UTF-8 || true
EOF
}

function destroy_session()
{
	local session=${1}

	pr_info "Destroy existing session ${session}"

	schroot -e -c "${session}"
}

function usage()
{
	local release arch

	release=$(lsb_release -c -s)
	arch=$(hostarch "${release}")

	cat <<EOF
Usage: run-chroot [-d] [-h] [-l c|s] [-p] [-u USER] [CHROOT[-ARCH]] [--]
       [COMMAND [ARGS]]

Run a chroot session. Create it first, if it doesn't exist.

Positional arguments:
  CHROOT                 Name of an existing chroot or session. If not
                         provided, defaults to the name of the running
                         release (${release}).
  ARCH                   Chroot architecture. If not provided, defaults
                         to the running host architecture (${arch}).

Optional 
  -d, --destroy          Destroy a session.
  -h, --help             Show this help text and exit.
  -l, --list [chroot|session|all]
                         List existing chroots or sessions or all.
  -p, --no-preserve-env  Don't preserve the user's environment inside
                         the chroot.
  -u, --user USER        Run the session as the user USER.
EOF
}

destroy=0
preserve_env=1
user=${USER}
chroot=

while [ $# -gt 0 ] ; do
	case "${1}" in
		-d|--destroy)
			destroy=1
			;;
		-h|--help)
			usage
			exit
			;;
		-l|--list)
			shift
			case "${1:-}" in
				a|all|"")  echo "-- All --"; regex="^" ;;
				c|chroot)  echo "-- Chroots --" ; regex="^source:" ;;
				s|session) echo "-- Sessions --" ; regex="^session:" ;;
				r|source)  echo "-- Sources --" ; regex="^source:" ;;
				*)         echo "Invalid type: ${1}" >&2 ; exit 2 ;;
			esac
			schroot -l --all | sed -n "s/${regex}//p" | sort
			exit
			;;
		-p|--no-preserve-env)
			preserve_env=0
			;;
		-u|--user)
			shift
			user=${1:-}
			;;
		--)
			shift
			break
			;;
		-*)
			pr_error "Invalid argument: ${1}"
			exit 2
			;;
		*)
			if [ -z "${chroot}" ] ; then
				chroot=${1}
			else
				break
			fi
			;;
	esac
	shift
done

if [ -z "${chroot}" ] ; then
	chroot=$(lsb_release -c -s)
fi

# Generate the session name from the provided chroot name. The naming
# convention is <user>--<name>-<arch>
case "${chroot}" in
	*--*-*)
		session=${chroot}
		;;
	*--*)
		session=${chroot}-$(hostarch "${chroot#*--}")
		;;
	*-*)
		session=${USER}--${chroot}
		;;
	*)
		session=${USER}--${chroot}-$(hostarch "${chroot}")
		;;
esac

# Generate the (base) chroot name from the session name
chroot=${session#*--}

# Destroy an existing session if -d, --destroy is provided
if [ "${destroy}" -eq 1 ] ; then
	if session_exists "${session}" ; then
		destroy_session "${session}"
	fi
	exit
fi

# Create the session if it doesn't exist
if ! session_exists "${session}" ; then
	if ! chroot_exists "${chroot}" ; then
		create_chroot "${chroot}"
	fi
	create_session "${session}" "${chroot}"
fi

# Assemble the PS1 prefix
debian_chroot=${chroot}
if [ "${user}" != "${USER}" ] ; then
	debian_chroot=${user}@${debian_chroot}
fi
export debian_chroot

# Assemble the optional schroot arguments
args=()
if [ "${preserve_env}" -eq 1 ] ; then
	args+=("-p")
fi

# Run the session
schroot -r -c "${session}" -u "${user}" "${args[@]}" -- "${@}"
