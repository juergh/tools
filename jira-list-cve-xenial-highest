#!/usr/bin/env python3
#
# List Jira issues
#

import argparse
import json
import sys
import re

from jira import JIRA
from prettytable import PrettyTable

def dump(issue):
    print(json.dumps(issue.raw["fields"], indent=4))
    
def main():
    parser = argparse.ArgumentParser(description="List Jira issues")
    args = parser.parse_args()

    # Note: Python JIRA uses ~/.netrc for authentication
    jira_server = "https://warthogs.atlassian.net"
    jira = JIRA(server=jira_server)

    # Get all fields and create a lookup map
    all_fields = jira.fields()
    field_map = {f["name"]: f["id"] for f in all_fields if f["name"]}

#    sla_id = field_map["SLA"]
    sla_id1 = "customfield_10834"
    sla_id2 = "customfield_10806"
    tc_id = field_map["Target Cycle"]

    issues = []
    start_at = 0
    max_results = 50
    while True:
        results = jira.search_issues("project='KERNSEC' and summary~'CVE-*' and priority='Highest' and status='Ready for backport'", startAt=start_at, maxResults=max_results)
        if not results:
            break
        issues.extend(results)
        num_results = len(results)
        if num_results < max_results:
            break
        start_at += num_results


    table = PrettyTable()
    table.field_names = ["Task", "Summary", "Priority", "Assignee", "SLA", "Target Cycle", "Parent Priority", "Parent Assignee"]
    table.align = "l"
    for issue in issues:
#        print(f"{jira_server}/browse/{issue.key}")

        parent = None
        task = None

        if "parent" in issue.raw["fields"]:
            # Issue is a subtask
            if issue.fields.summary.lower().endswith("xenial"):
                parent = jira.issue(issue.fields.parent.key)
                task = issue

        else:
            # Issue is a parent, walk through all subtasks
            parent = issue
            task = None
            for subtask in issue.fields.subtasks:
                if subtask.fields.summary.lower().endswith("xenial"):
                    task = jira.issue(subtask.key)
                    break

        if parent and task:
            table.add_row([f"{jira_server}/browse/{task.key}",
                           task.fields.summary,
                           task.fields.priority,
                           task.fields.assignee,
                           getattr(task.fields, sla_id1, getattr(task.fields, sla_id2, "N/A")),
                           getattr(task.fields, tc_id, "N/A"),
                           parent.fields.priority,
                           parent.fields.assignee])
                        
    print(table)
    return 0

if __name__ == "__main__":
    sys.exit(main())
