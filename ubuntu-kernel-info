#!/usr/bin/env python3
#
# Show Ubuntu kernel info
#

import argparse
import gzip
import io
import json
import sys

import requests

# Package fields
PKG_FIELDS = (
    # Series
    "series.yymm",
    "series.name",
    "series.devel",
    "series.supported",
    "series.lts",
    "series.esm",
    "series.active",
    # Source
    "source.name",
    "source.owner",
    "source.devel",
    "source.supported",
    "source.active",
    "source.forwardport",
    "source.backport",
    "source.invalid-tasks",
    "source.versions",
    "source.routing",
    # Package
    "package.format",  # deb or snap
    "package.name",
    "package.type",
    "package.repo.url",
    "package.repo.branch",
)


def parse_kernel_series(ks):
    """
    Parse kernel-series JSON and return a list of package dicts
    """
    for series, series_data in ks.items():
        codename = series_data.get("codename")
        if not codename:
            continue

        series_devel = series_data.get("development", False)
        series_supported = series_data.get("supported", False)
        series_lts = series_data.get("lts", False)
        series_esm = series_data.get("esm", False)
        series_active = (series_devel or series_supported)
        series_routing_map = series_data.get("routing-map", {})

        series_entry = {
            "series.yymm": series,
            "series.name": codename,
            "series.devel": series_devel,
            "series.supported": series_supported,
            "series.lts": series_lts,
            "series.esm": series_esm,
            "series.active": series_active,
        }

        for source, source_data in series_data.get("sources", {}).items():
            devel = source_data.get("development", series_devel)
            supported = source_data.get("supported", True) if series_supported else False
            active = (series_active and (devel or supported))

            # Source package routing
            default = "devel" if series_devel else "esm" if series_esm else "default"
            routing = source_data.get("routing", default)
            routing = series_routing_map.get(routing, routing)
            routing_table = ks["defaults"]["routing-table"][routing]

            routing_list = []
            for key, val in routing_table.items():
                if val:
                    for v in val:
                        routing_list.append(f"{key}|{'|'.join(v)}")
            if not routing_list:
                routing_list = ["-"]

            source_entry = {
                "source.name": source,
                "source.owner": source_data.get("owner"),
                "source.devel": devel,
                "source.supported": supported,
                "source.active": active,
                "source.forwardport": source_data.get("copy_forward", False),
                "source.backport": source_data.get("backport", False),
                "source.invalid-tasks": ",".join(
                    source_data.get("invalid-tasks", ["-"])
                ),
                "source.versions": ",".join(source_data.get("versions", ["-"])),
                "source.routing": ",".join(routing_list),
            }

            for key in ("packages", "snaps"):
                for package, package_data in source_data.get(key, {}).items():
                    if not package_data:
                        continue
                    repo = package_data.get("repo")
                    if not repo:
                        continue
                    package_entry = {
                        "package.format": "snap" if key == "snaps" else "deb",
                        "package.name": package,
                        "package.type": (
                            "snap"
                            if key == "snaps"
                            else package_data.get("type", "main")
                        ),
                        "package.repo.url": repo[0],
                        "package.repo.branch": (repo[1] if len(repo) > 1 else "master"),
                    }

                    entry = dict(series_entry)
                    entry.update(source_entry)
                    entry.update(package_entry)
                    for _key, _val in dict(entry).items():
                        entry[_key] = str(_val).lower()
                    yield entry


def print_package(pkg, fields=None, verbose=False):
    """
    Print a single package
    """
    if not fields:
        # Print all fields
        fields = PKG_FIELDS

    if verbose:
        data = [f"{f}={pkg[f]}" for f in PKG_FIELDS if f in fields]
    else:
        data = [pkg[f] for f in PKG_FIELDS if f in fields]

    print(" ".join(data))


def main():
    """
    Main entry point
    """
    desc = "Provides information about Ubuntu's kernels."
    epilog = """

Kernel selections:
  devel          Development kernels.
  supported      Supported non-ESM kernels.
  supported-esm  Supported ESM kernels.

  supported-all  supported + supported-esm.
  active         devel + supported + supported-esm.

  all            All kernels listed in kernel-series.json.
  dump           Dump kernel-series.json for debugging.
"""
    parser = argparse.ArgumentParser(
        description=desc,
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=epilog,
    )
    parser.add_argument(
        "-f",
        "--field",
        help="List only the provided fields. If not provided, lists all fields. "
        "Comma-separated list. "
        f"Possible values are: {', '.join(PKG_FIELDS)}.",
    )
    parser.add_argument(
        "-t",
        "--pkg-type",
        choices=("main", "meta", "signed", "lrm", "extra", "extra2", "snap"),
        help="List only packages of the provided type. "
        "If not provided, lists all packages.",
    )
    parser.add_argument(
        "--pkg-name",
        help="List only packages with the provided package name. "
        "If not provided, lists all packages.",
    )
    parser.add_argument(
        "--pkg-format",
        choices=("deb", "snap"),
        help="List only packages with the provided package format. "
        "If not provided, lists all packages.",
    )
    parser.add_argument(
        "--src-name",
        help="List only packages with the provided source name. "
        "If not provided, lists all packages.",
    )
    parser.add_argument(
        "-v", "--verbose", action="store_true", help="Enable verbose output."
    )
    parser.add_argument(
        "selection",
        help="Select which kernels to list. "
        "Comma-separated list. "
        "Possible values are: devel, supported, supported-esm, supported-all, active, all, dump.",
    )
    args = parser.parse_args()

    fields = args.field.split(",") if args.field else None
    selections = set(args.selection.split(","))

    if "supported-all" in selections:
        selections.add("supported")
        selections.add("supported-esm")
    if "active" in selections:
        selections.add("devel")
        selections.add("supported")
        selections.add("supported-esm")

    # Download and gunzip kernel-series.json
    r = requests.get("https://kernel.ubuntu.com/info/kernel-series.json.gz", timeout=5)
    with gzip.open(io.BytesIO(r.content)) as fh:
        ks = json.load(fh)

    if "dump" in selections:
        print(json.dumps(ks, indent=4))
        sys.exit(0)

    # Parse kernel-series
    pkgs = parse_kernel_series(ks)

    # Filter the packages and print them
    for pkg in pkgs:
        keep = False
        if "all" in selections:
            keep = True
        if "devel" in selections and pkg["series.devel"] == "true":
            keep = True
        if (("supported" in selections and
             (pkg["series.supported"], pkg["source.supported"], pkg["series.esm"]) == ("true", "true", "false"))):
            keep = True
        if (("supported-esm" in selections and
             (pkg["series.supported"], pkg["source.supported"], pkg["series.esm"]) == ("true", "true", "true"))):
            keep = True
        if not keep:
            continue

        if args.pkg_type and pkg["package.type"] != args.pkg_type:
            continue
        if args.pkg_name and pkg["package.name"] != args.pkg_name:
            continue
        if args.pkg_format and pkg["package.format"] != args.pkg_format:
            continue
        if args.src_name and pkg["source.name"] != args.src_name:
            continue

        print_package(pkg, fields=fields, verbose=args.verbose)


if __name__ == "__main__":
    main()
