#!/bin/bash -eu
#
# Search the linux 'Fixes:' file for commits that fix the given commit(s).
#

COLOR=1

function pr_error()
{
	if [ ${COLOR} -eq 1 ] ; then
		echo -e "\033[31m${*}\033[0m" 1>&2
	else
		echo "${*}" 1>&2
	fi
}

function pr_warn()
{
	if [ ${COLOR} -eq 1 ] ; then
		echo -e "\033[33m${*}\033[0m"
	else
		echo "${*}"
	fi
}

function find_fixes()
{
	local commit=${1} indent=${2:-2}
	local fixes fix

	readarray -t fixes < <(grep -aP "__FIXES__\s+${commit::12}" "${LINUX_FIXES}")

	for fix in "${fixes[@]}" ; do
		printf "%0.s " $(seq "${indent}")
		pr_warn "${fix%% __FIXES__*}"
		find_fixes "${fix%% *}" "$((indent + 2))"
	done
}

function get_upstream_commit()
{
	local commit=${1}
	local pattern_list pattern upstream

	pattern_list=(
		"commit [0-9a-f]{12,} upstream"
		"upstream commit [0-9a-f]{12,}"
		"cherry[ -]?picked from .*\b[0-9a-f]{12,}"
		"back[ -]?ported from .*\b[0-9a-f]{12,}"
	)
	pattern=$(printf "|%s" "${pattern_list[@]}")
	pattern=${pattern:1}

	upstream=$(git log --format="%b" "${commit}" -1 | \
				   grep -m1 -iP "${pattern}" |\
				   grep -oP "[0-9a-f]{12,}" || true)
	echo "${upstream::12}"
}

function process_commit()
{
	local commit=${1::12}
	local subject upstream

	subject=$(git --git-dir="${LINUX_REPO}" log --format="%s" \
				  "${commit}" -1 2>/dev/null || true)

	if [ -n "${subject}" ] ; then
		# Commit found in the upstream linux repo, so process it
		echo "${commit} ${subject}"
		find_fixes "${commit}"

	else
		# Check if the commit exists in the current repo
		if ! git cat-file -e "${commit}^{commit}" 2>/dev/null ; then
			pr_error "Commit ${commit} not found"
			return
		fi

		# Try to find an upstream commit reference in the commit message
		upstream=$(get_upstream_commit "${commit}")
		if [ -z "${upstream}" ] ; then
			subject=$(git log --format="%s" "${commit}" -1)
			pr_error "No upstream commit found: ${commit} ${subject}"
			return
		fi

		# Get the subject of the upstream commit
		subject=$(git --git-dir="${LINUX_REPO}" log --format="%s" \
					  "${upstream}" -1 2>/dev/null || true)
		if [ -z "${subject}" ] ; then
			pr_error "Upstream commit not found: ${commit}"
			return
		fi

		# Finally process the upstream commit
		echo "${commit} -> ${upstream} ${subject}"
		find_fixes "${upstream}"
	fi
}

function usage()
{
	cat <<EOF
Usage: find-linux-fixes [-h] [-c COMMIT[,COMMIT,...]] [REV_RANGE]

Find 'Fixes:' commits in the upstream linux repo for the provided commit
hash(es). The provided commits can either be upstream commits or commits from
the current repo.

Postional arguments:
  REV_RANGE            The range of git commits to search fixes for. Defaults
                       to HEAD if not provided and COMMIT is also not provided.

Optional arguments:
  -c, --commit COMMIT  Commit to search fixes for. Can also be a list of
                       comma-separated commits.
  -h, --help           Show this help text and exit.
  --no-colors          Disable colored ouput.
EOF
}

commits=()
rev_range=()

while [ $# -gt 0 ] ; do
	case "${1}" in
		-h|--help)
			usage
			exit
			;;
		-c|--commit)
			shift
			readarray -t commits < <(echo "${1}" | tr ',' '\n')
			;;
		--no-colors)
			COLOR=0
			;;
		*)
			rev_range=("${@}")
			break
			;;
    esac
    shift
done

if [ ${#commits[@]} -gt 0 ] && [ ${#rev_range[@]} -gt 0 ] ; then
	usage
	exit 2
fi

if [ ${#commits[@]} -eq 0 ] && [ ${#rev_range[@]} -eq 0 ] ; then
	rev_range=("HEAD")
fi

if [ ${#commits[@]} -gt 0 ] ; then
	for commit in "${commits[@]}" ; do
		process_commit "${commit}"
	done
else
	while IFS= read -r commit ; do
		process_commit "${commit}"
	done < <(git log --format=%h "${rev_range[@]}")
fi
