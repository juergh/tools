#!/bin/bash
#
# Search the given directory for modules that want to load firmware
#

FW_SYMBOLS=(
	firmware_request_builtin
	firmware_request_cache
	firmware_request_nowarn
	firmware_request_platform
	firmware_upload_register
	firmware_upload_unregister
	fw_fallback_config
	register_firmware_config_sysctl
	release_firmware
	request_firmware
	request_firmware_direct
	request_firmware_into_buf
	request_firmware_nowait
	request_partial_firmware_into_buf
	unregister_firmware_config_sysctl
)

function check_module()
{
	local mod=${1}
	local m

	m=${mod##*/kernel/}
	m=${m%.ko*}.ko

	# Check if the module declares firmware
	modinfo -F firmware "${mod}" > "${TMPFILE}"
	if [ -s "${TMPFILE}" ] ; then
		echo "S: ${m}"
		if [ -n "${FWINFO}" ] ; then
			cat "${TMPFILE}" >> "${FWINFO}"
		fi
		return
	fi

	# Check if the module uses firmware load symbols
	zstd -d -q -f -o "${TMPFILE}" "${mod}"
	if nm -P "${TMPFILE}" | grep -qE "^(${re_symbol}) "; then
		echo "U: ${m}"
	fi
}

function usage()
{
	cat <<EOF
Usage: find-modules-with-firmware [-f FWINFO] [-h] [DIR [DIR..]]

Search the given directories for modules that want to load firmware.

Output prefix:
  S:  Module declares firmware (via modinfo).
  U:  Module uses firmware load symbols.

Optional arguments:
  -f, --fwinfo FWINFO  Write firmware info to the file FWINFO.
  -h, --help           Show this help message and exit.
EOF
}

FWINFO=

while [ $# -gt 0 ] ; do
	case "${1}" in
		-f|--fwinfo)
			shift
			FWINFO=${1}
			;;
		-h|--help)
			usage
			exit
			;;
		*)
			break
			;;
	esac
	shift
done

#readarray -t FW_SYMBOLS < <(git grep -h EXPORT_SYMBOL drivers/base/firmware_loader/ | \
#                            sed 's/.*(//;s/.)*//;s/,*//' | sort -u)

re_symbol=$(printf "|%s" "${FW_SYMBOLS[@]}")
re_symbol=${re_symbol:1}

TMPFILE=$(mktemp)

if [ -n "${FWINFO}" ] ; then
	true > "${FWINFO}"
fi

while IFS= read -r mod ; do
	check_module "${mod}"
done < <(find "${@}" -name '*.ko*')

if [ -n "${FWINFO}" ] ; then
	sort -u "${FWINFO}" > "${TMPFILE}"
	mv "${TMPFILE}" "${FWINFO}"
fi

rm -f "${TMPFILE}"
