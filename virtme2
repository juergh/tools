#!/bin/bash -eu
#
# Wrapper for virtme-ng
#

function out()
{
	local rc=${?}

	trap - EXIT INT TERM HUP

	[ ${rc} -eq 0 ] || echo "-- Error: Script failed" >&2

	exit "${rc}"
}

function run_chroot()
{
	if [ -n "${SERIES}" ] ; then
		echo "-- Run in chroot (${SERIES}):"
		echo "+ ${*}"
		run-chroot "${SERIES}" -- "${@}"
	else
		echo "-- Run:"
		echo "+ ${*}"
		"${@}"
	fi
}

function virtme_configs()
{
	# Configs required for virtme
	cat <<EOF
# Generic
CONFIG_UEVENT_HELPER=n
CONFIG_VIRTIO=y
CONFIG_VIRTIO_PCI=y
CONFIG_VIRTIO_MMIO=y
CONFIG_VIRTIO_BALLOON=y
CONFIG_NET=y
CONFIG_NET_CORE=y
CONFIG_NETDEVICES=y
CONFIG_NETWORK_FILESYSTEMS=y
CONFIG_INET=y
CONFIG_NET_9P=y
CONFIG_NET_9P_VIRTIO=y
CONFIG_9P_FS=y
CONFIG_VIRTIO_NET=y
CONFIG_CMDLINE_OVERRIDE=n
CONFIG_BINFMT_SCRIPT=y
CONFIG_SHMEM=y
CONFIG_TMPFS=y
CONFIG_UNIX=y
CONFIG_MODULE_SIG_FORCE=n
CONFIG_DEVTMPFS=y
CONFIG_TTY=y
CONFIG_VT=y
CONFIG_UNIX98_PTYS=y
CONFIG_EARLY_PRINTK=y
CONFIG_INOTIFY_USER=y

# virtio-scsi support
CONFIG_BLOCK=y
CONFIG_SCSI_LOWLEVEL=y
CONFIG_SCSI=y
CONFIG_SCSI_VIRTIO=y
CONFIG_BLK_DEV_SD=y

# virt-serial support
CONFIG_VIRTIO_CONSOLE=y

# watchdog (useful for test scripts)
CONFIG_WATCHDOG=y
CONFIG_WATCHDOG_CORE=y
CONFIG_I6300ESB_WDT=y
# Make sure debuginfo are available
CONFIG_DEBUG_INFO_DWARF_TOOLCHAIN_DEFAULT=y
# Enable overlayfs
CONFIG_OVERLAY_FS=y
# virtio-fs support
CONFIG_DAX=y
CONFIG_DAX_DRIVER=y
CONFIG_FS_DAX=y
CONFIG_MEMORY_HOTPLUG=y
CONFIG_MEMORY_HOTREMOVE=y
CONFIG_ZONE_DEVICE=y
CONFIG_FUSE_FS=y
CONFIG_VIRTIO_FS=y
EOF
}

function syz_configs()
{
	# Configs required for syzcaller
	cat <<EOF
# Coverage collection.
CONFIG_KCOV=y

# Debug info for symbolization.
CONFIG_DEBUG_INFO_DWARF4=y

# Memory bug detector
CONFIG_KASAN=y
CONFIG_KASAN_INLINE=y

# Required for Debian Stretch and later
CONFIG_CONFIGFS_FS=y
CONFIG_SECURITYFS=y
EOF
}

function minimal_modules()
{
	# List of minimal modules (very machine and kernel version specific)
	cat <<EOF
kvm_intel
kvm_amd
kvm
irqbypass
crct10dif_pclmul
crc32_pclmul
ghash_clmulni_intel
aesni_intel
aes_x86_64
lrw
gf128mul
glue_helper
psmouse
ablk_helper
cryptd
input_leds
serio_raw
floppy
8250_fintek
i2c_piix4
pata_acpi
mac_hid
EOF
}

function usage()
{
	cat <<EOF
Usage: virtme2 [-h] [--kdir DIR] CMD [ARGS...]

Wrapper for virtme-ng.

The kernel build output directory defaults to buildd/virtme-X.Y
if neither KBUILD_OUTPUT is set not --kdir DIR is provided.

Supported environment variables:
  KBUILD_OUTPUT    Kernel build output directory.

Available commands:
  chroot           Enter build chroot.
  config [CONFIG]  Create kernel config. Supported <CONFIG> values:
                     menu:   Run config menu.
                     ubuntu: Use generic Ubuntu configs.
                     virtme: Use default virtme configs. This is the
                             default, if <CONFIG> is not provided.
  make             Build kernel.
  run              Run kernel.

Optional common arguments:
  -h, --help     Show this help text and exit.
  --kdir DIR     Kernel build output directory.
  --lsmod LSMOD  Build only modules listed in <LSMOD>.
  --min          Build only a minimal set of hard-coded modules.
  --syz          Enable config options for syzcaller.
EOF
}

kdir=${KBUILD_OUTPUT:-}
lsmod=
cmd=
config=
min=0
syz=0

while [ $# -gt 0 ] ; do
	case "${1}" in
		--kdir)
			shift
			kdir=${1}
			;;
		--lsmod)
			shift
			lsmod=${1}
			;;
		--min)
			min=1
			;;
		--syz)
			syz=1
			;;
		config)
			cmd=config
			shift
			config=${1:-}
			;;
		chroot|make|run)
			cmd=${1}
			;;
		*)
			break;
			;;
	esac
	shift
done

if [ -z "${cmd}" ] ; then
	usage
	exit 2
fi

if [ -n "${lsmod}" ] && [ ${min} -eq 1 ] ; then
	echo "--lsmod and --min are mutulay exclusive." >&2
	exit 2
fi

trap out EXIT INT TERM HUP

SERIES=
if [ -e debian/debian.env ] ; then
	# shellcheck disable=SC1091
	. debian/debian.env
	SERIES=$(dpkg-parsechangelog -l "${DEBIAN}"/changelog -S Distribution)
fi

if [ -e Makefile ] ; then
	if [ -z "${kdir}" ] ; then
		v1=$(grep -m1 '^VERSION\s*=' Makefile | sed 's/.*=\s*//')
		v2=$(grep -m1 '^PATCHLEVEL\s*=' Makefile | sed 's/.*=\s*//')
		if [ -z "${v1}" ] || [ -z "${v2}" ] ; then
			echo "Failed to parse Makefile" >&2
			exit 1
		fi
		kdir=buildd/virtme-${v1}.${v2}
	fi

	ARCH=$(dpkg-architecture -q DEB_HOST_ARCH)
	CONFIG=${kdir}/.config
	DOT_VERSION=$(cat "${kdir}"/.version 2>/dev/null || echo 1)

	KBUILD_OUTPUT=${kdir}
	KBUILD_BUILD_VERSION="${DOT_VERSION}+$(git rev-parse --short=8 HEAD)"

	export KBUILD_OUTPUT KBUILD_BUILD_VERSION

	echo "-- Use kernel build output directory: ${KBUILD_OUTPUT}"
fi

case "${cmd}" in
	chroot)
		run_chroot bash
		;;

	config)
		case "${config}" in
			""|virtme)
				echo "-- Generate default virtme config"
				virtme-configkernel "${@}"
				;;

			menu)
				run_chroot make menuconfig
				;;

			ubuntu)
				echo "-- Generate Ubuntu config"
				rm -rf CONFIGS
				run_chroot fakeroot debian/rules clean
				run_chroot debian/rules genconfigs || true

				mkdir -p "${KBUILD_OUTPUT}"
				cp CONFIGS/"${ARCH}"-config.flavour.generic "${CONFIG}"

				if [ ${min} -eq 1 ] ; then
					lsmod=${KBUILD_OUTPUT}/virtme2.modules
					minimal_modules > "${lsmod}"
				fi

				if [ -e "${lsmod}" ] ; then
					echo
					echo "-- Enable only a subset of modules"
					run_chroot make LSMOD="$(realpath -e "${lsmod}")" localmodconfig
				fi

				echo
				echo "-- Set virtme configs"
				virtme_configs >> "${CONFIG}"

				if [ ${syz} -eq 1 ] ; then
					echo
					echo "-- Set syzcaller configs"
					syz_configs >> "${CONFIG}"
				fi

				run_chroot make olddefconfig
				;;

			*)
				echo "-- Invalid config option: ${config}" >&2
				exit 1
				;;
		esac
		;;

	make)
		run_chroot make -j"$(getconf _NPROCESSORS_ONLN)" "${@}"
		;;

	run)
		if [ -e "${1:-}" ] ; then
			vng --name VIRTME2 --run "${@}"
		elif [ -n "${KBUILD_OUTPUT:-}" ] ; then
			vng --name VIRTME2 --run "${KBUILD_OUTPUT}" "${@}"
		else
			echo "-- Don't know what/how to run" >&2
			exit 1
		fi
		;;

	*)
		echo "Invalid command: ${1}" >&2
		exit 1
		;;
esac
