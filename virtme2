#!/bin/bash -eu
#
# Wrapper for virtme-ng
#

function out()
{
	local rc=${?}

	trap - EXIT INT TERM HUP

	[ ${rc} -eq 0 ] || echo "-- Error: Script failed" >&2

	exit "${rc}"
}

function run_chroot()
{
	if [ -n "${SERIES}" ] ; then
		echo "-- Run in chroot (${SERIES}):"
		echo "+ ${*}"
		run-chroot "${SERIES}" -- "${@}"
	else
		echo "-- Run:"
		echo "+ ${*}"
		"${@}"
	fi
}

function config_virtme()
{
	cat <<EOF
# Generic
CONFIG_UEVENT_HELPER=n
CONFIG_VIRTIO=y
CONFIG_VIRTIO_PCI=y
CONFIG_VIRTIO_MMIO=y
CONFIG_VIRTIO_BALLOON=y
CONFIG_NET=y
CONFIG_NET_CORE=y
CONFIG_NETDEVICES=y
CONFIG_NETWORK_FILESYSTEMS=y
CONFIG_INET=y
CONFIG_NET_9P=y
CONFIG_NET_9P_VIRTIO=y
CONFIG_9P_FS=y
CONFIG_VIRTIO_NET=y
CONFIG_CMDLINE_OVERRIDE=n
CONFIG_BINFMT_SCRIPT=y
CONFIG_SHMEM=y
CONFIG_TMPFS=y
CONFIG_UNIX=y
CONFIG_MODULE_SIG_FORCE=n
CONFIG_DEVTMPFS=y
CONFIG_TTY=y
CONFIG_VT=y
CONFIG_UNIX98_PTYS=y
CONFIG_EARLY_PRINTK=y
CONFIG_INOTIFY_USER=y

# virtio-scsi support
CONFIG_BLOCK=y
CONFIG_SCSI_LOWLEVEL=y
CONFIG_SCSI=y
CONFIG_SCSI_VIRTIO=y
CONFIG_BLK_DEV_SD=y

# virt-serial support
CONFIG_VIRTIO_CONSOLE=y

# watchdog (useful for test scripts)
CONFIG_WATCHDOG=y
CONFIG_WATCHDOG_CORE=y
CONFIG_I6300ESB_WDT=y
# Make sure debuginfo are available
CONFIG_DEBUG_INFO_DWARF_TOOLCHAIN_DEFAULT=y
# Enable overlayfs
CONFIG_OVERLAY_FS=y
# virtio-fs support
CONFIG_DAX=y
CONFIG_DAX_DRIVER=y
CONFIG_FS_DAX=y
CONFIG_MEMORY_HOTPLUG=y
CONFIG_MEMORY_HOTREMOVE=y
CONFIG_ZONE_DEVICE=y
CONFIG_FUSE_FS=y
CONFIG_VIRTIO_FS=y
EOF
}

function usage()
{
	cat <<EOF
Usage: virtme2 [-h] [--kdir DIR] [--lsmod LSMOD] CMD [ARGS...]

Wrapper for virtme-ng.

The kernel build output directory defaults to buildd/virtme-X.Y
if neither KBUILD_OUTPUT is set not --kdir DIR is provided.

Supported environment variables:
  KBUILD_OUTPUT  Kernel build output directory.

Available commands:
  config         Create default virtme kernel config.
  make           Build kernel.
  menuconfig     Run config menu.
  run            Run kernel.
  ubuntuconfig   Use generic Ubuntu config.

Optional arguments:
  -h, --help     Show this help text and exit.
  --kdir DIR     Kernel build output directory.
  --lsmod LSMOD  Build only modules listed in LSMOD. Only used
                 with the 'ubuntuconfig' command.
EOF
}

lsmod=
kdir=${KBUILD_OUTPUT:-}
cmd=

while [ $# -gt 0 ] ; do
	case "${1}" in
		--lsmod)
			shift
			lsmod=${1}
			;;
		--kdir)
			shift
			kdir=${1}
			;;
		config|make|menuconfig|run|ubuntuconfig)
			cmd=${1}
			;;
		*)
			break;
			;;
	esac
	shift
done

if [ -z "${cmd}" ] ; then
	usage
	exit 2
fi

trap out EXIT INT TERM HUP

SERIES=
if [ -e debian/debian.env ] ; then
	# shellcheck disable=SC1091
	. debian/debian.env
	SERIES=$(dpkg-parsechangelog -l "${DEBIAN}"/changelog -S Distribution)
fi

if [ -e Makefile ] ; then
	if [ -z "${kdir}" ] ; then
		v1=$(grep -m1 '^VERSION\s*=' Makefile | sed 's/.*=\s*//')
		v2=$(grep -m1 '^PATCHLEVEL\s*=' Makefile | sed 's/.*=\s*//')
		if [ -z "${v1}" ] || [ -z "${v2}" ] ; then
			echo "Failed to parse Makefile" >&2
			exit 1
		fi
		kdir=buildd/virtme-${v1}.${v2}
	fi

	ARCH=$(dpkg-architecture -q DEB_HOST_ARCH)
	CONFIG=${kdir}/.config
	DOT_VERSION=$(cat "${kdir}"/.version 2>/dev/null || echo 1)

	KBUILD_OUTPUT=${kdir}
	KBUILD_BUILD_VERSION="${DOT_VERSION}+$(git rev-parse --short=8 HEAD)"

	export KBUILD_OUTPUT KBUILD_BUILD_VERSION

	echo "-- Use kernel build output directory: ${KBUILD_OUTPUT}"
fi

case "${cmd}" in
	config)
		echo "-- Generate default virtme config"
		virtme-configkernel "${@}"
		;;

	make)
		run_chroot make -j"$(getconf _NPROCESSORS_ONLN)" "${@}"
		;;

	menuconfig)
		run_chroot make menuconfig
		;;

	run)
		if [ -e "${1:-}" ] ; then
			vng --name VIRTME2 --run "${@}"
		elif [ -n "${KBUILD_OUTPUT:-}" ] ; then
			vng --name VIRTME2 --run "${KBUILD_OUTPUT}" "${@}"
		else
			echo "-- Don't know what/how to run" >&2
			exit 1
		fi
		;;

	ubuntuconfig)
		echo "-- Generate Ubuntu config"
		rm -rf CONFIGS
		run_chroot fakeroot debian/rules clean
		run_chroot debian/rules genconfigs || true

		mkdir -p "${KBUILD_OUTPUT}"
		cp CONFIGS/"${ARCH}"-config.flavour.generic "${CONFIG}"

		echo
		echo "-- Set virtme configs"
		config_virtme >> "${CONFIG}"
		run_chroot make olddefconfig

		if [ -e "${lsmod}" ] ; then
			echo
			echo "-- Enable only local modules"
			run_chroot make LSMOD="$(realpath -e "${lsmod}")" localmodconfig
		fi
		;;

	*)
		echo "Invalid command: ${1}" >&2
		exit 1
		;;
esac
