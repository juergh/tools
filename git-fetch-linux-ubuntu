#!/bin/bash -eu
#
# To initialize the repo:
#   git clone --bare --origin upstream --reference linux.git linux.git linux-ubuntu.git
#

function out()
{
	local rc=${?}

	trap - EXIT INT TERM HUP

	if [ ${rc} -ne 0 ] ; then
		echo "Script failed" >&2
	fi

	exit "${rc}"
}

function ubuntu_kernel_info()
{
	ubuntu-kernel-info \
		-f series.name,package.name,package.repo.url,package.repo.branch \
		"${@}"
}

function print_remote_section()
{
	local remote=${1} url=${2} heads=${3} tags=${4}
	local head tag

	cat <<EOF
[remote "${remote}"]
	url = ${url}
	pushurl = (no push)
	tagopt = --no-tags
EOF

	for head in ${heads} ; do
		cat <<EOF
	fetch = +refs/heads/${head}:refs/heads/${remote}/${head}
EOF
	done

	for tag in ${tags} ; do
		cat <<EOF
	fetch = +refs/tags/${tag}:refs/tags/${tag}
EOF
	done
}

function usage()
{
	cat <<EOF
Usage: git-fetch-linux-ubuntu [-h]

Fetch Ubuntu (and upstream) kernels.

Optional arguments:
  -h, --help  Show this help text and exit.
EOF
}

while [ ${#} -gt 0 ] ; do
	case "${1}" in
		-h|--help)
			usage
			exit
			;;
		*)
			echo "Invalid argument: ${1}" >&2
			exit 2
			;;
	esac
	# shellcheck disable=SC2317
	shift
done

if ! [ -e config ] ; then
	echo "No such file: config" >&2
	exit 1
fi

trap out EXIT INT TERM HUP

# FIXME; No hard-coding of kernel versions!
declare -A versions=(
	[unstable]="*"
	[noble]="6.8.* hwe-*"
	[mantic]="6.5.*"
	[jammy]="5.15.* hwe-*"
	[focal]="5.4.* hwe-*"
	[bionic]="4.15.* hwe-*"
	[xenial]="4.4.* hwe-*"
	[trusty]="3.13.* hwe-*"
)

# Just in case
git config remote.upstream.pushurl "(no push)"
git config remote.upstream.tagopt "--no-tags"
git config --unset-all remote.upstream.fetch || true
git config --add remote.upstream.fetch '+refs/heads/linux*:refs/heads/upstream/linux*'
git config --add remote.upstream.fetch '+refs/tags/v*:refs/tags/v*'

# Remove all remotes (except upstream)
while IFS= read -r remote ; do
	if [ "${remote}" != "upstream" ] ; then
		git remote remove "${remote}"
	fi
done < <(git remote)

# Add remotes
while IFS=" " read -r ktype series package url branch ; do
	if [ "${package}" = "linux-unstable" ] ; then
		series=unstable
	fi

	remote=${ktype}/${series}/${package}
	heads=${branch}
	tag_prefix=Ubuntu${package#linux}-

	set -f
	tags=""
	for v in ${versions["${series}"]} ; do
		tags="${tags} ${tag_prefix}$v"
	done
	set +f

	print_remote_section "${remote}" "${url}" "${heads}" "${tags}"
done < <(
	ubuntu_kernel_info --pkg-name linux supported      | sed 's/^/public /'
	ubuntu_kernel_info --pkg-name linux-unstable devel | sed 's/^/public /'
	ubuntu_kernel_info --pkg-name linux supported-esm  | sed 's/^/esm /'
) >> config

# Fetch everything
git fetch --all
