#!/bin/sh -eu
#
# Search the given git repo for commits with 'Fixes:' tags and add them
# to the given fixes file. This creates a fast searchable 'database' for
# commits that fix other commits.
#

usage()
{
	cat <<EOF
Usage: find-fixes [-b BRANCH] [-h] GIT_DIR START_COMMIT|FIXES_FILE

Find commits with 'Fixes:' tags in the provided git repository.

Positional argument:
  GIT_DIR       The local git repo to search.
  START_COMMIT  Limit the search to the commit range <START_COMMIT>..HEAD. In
                this mode, the found commits are simply written to stdout and
                not to a file.
  FIXES_FILE    Add the found commits to the file <FIXES_FILE>. The start
                commit for the search is read from the first line of the
                <FIXES_FILE> file, if it exists. Otherwise the whole commit
                history is searched.

Optional arguments:
  -b, --branch BRANCH  Name of branch to search.
  -h, --help           Show this help text and exit.
EOF
}

branch=
git_dir=
commit_file=

while [ ${#} -gt 0 ] ; do
	case "${1}" in
		-b|--branch)
			shift
			branch=${1}
			;;
		-h|--help)
			usage
			exit
			;;
		*)
			if [ -z "${git_dir}" ] ; then
				git_dir=${1}
			elif [ -z "${commit_file}" ] ; then
				commit_file=${1}
			else
				echo "Invalid argument: ${1}" >&2
				exit 2
			fi
			;;
	esac
	shift
done

if [ -z "${git_dir}" ] || [ -z "${commit_file}" ] ; then
	usage
	exit 2
fi

if echo "${commit_file}" | grep -qP "^[0-9a-f]{12,}$" ; then
	rev_range=${commit_file}..${branch}
	fixes_file=
else
	fixes_file=${commit_file}
	rev_range=
fi

# Create a temp file with the current (new) HEAD commit
tmp_file=${fixes_file}.tmp
head=$(git --git-dir "${git_dir}" log --abbrev-commit --abbrev=12 \
		   --format="%h %s" "${branch}" -1)
echo "__HEAD__ ${head}" > "${tmp_file}"

# Read the previous (old) HEAD commit from the fixes file and construct the
# range of commits to search
if [ -e "${fixes_file}" ] ; then
	head=$(head -n 1 "${fixes_file}")
	head=${head#__HEAD__ }
	head=${head%% *}
	rev_range=${head}..${branch}
fi

# Parse the commits
git --git-dir "${git_dir}" log --abbrev-commit --abbrev=12 \
	--format="__COMMIT__%h%n__SUBJECT__%s%n%b%n__END__%n" "${rev_range}" | \
	grep -P '^__COMMIT__|^__SUBJECT__|^\s*Fixes:.*\b[0-9a-f]{8,}\b|^__END__' | \
while IFS= read -r line ; do
	case "${line}" in
		__COMMIT__*)
			commit=${line#__COMMIT__}
			subject=
			fixes=
			;;
		__SUBJECT__*)
			subject=${line#__SUBJECT__}
			;;
		*Fixes:*)
			fixes_ref=$(echo "${line}" | sed -e 's,^\s*Fixes:\s*,,' -e 's,\s*$,,')
			fixes="${fixes} __FIXES__ ${fixes_ref}"
			;;
		__END__)
			if [ -n "${fixes}" ] ; then
				echo "${commit} ${subject} ${fixes# }" >> "${tmp_file}"
			fi
			;;
	esac
done

# Dry-run
if [ -z "${fixes_file}" ] ; then
	cat "${tmp_file}"
	rm -f "${tmp_file}"
	exit
fi

# Append the existing fixes file to the temp file and move it
if [ -e "${fixes_file}" ] ; then
	tail -n +2 "${fixes_file}" >> "${tmp_file}"
fi
mv "${tmp_file}" "${fixes_file}"
