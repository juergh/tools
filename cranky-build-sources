#!/bin/bash -eu

function out()
{
	local rc=${?}

	trap - EXIT

	if [ "${rc}" -ne 0 ] ; then
		echo "Script failed" >&2
	fi

	exit "${rc}"
}

function set_pkg_build_opts()
{
	local package=${1} version=${2}

	case "${package}" in
		linux-meta*)
			BO_META+=("-v${version}")
			;;
		linux-signed*)
			BO_SIGNED+=("-v${version}")
			;;
		linux-restricted-modules*)
			BO_LRM+=("-v${version}")
			;;
		linux*)
			BO_MAIN+=("-v${version}")
			;;
		*)
			echo "Unsupported package: ${package}" >&2
			exit 1
	esac
}

function usage()
{
	cat <<EOF
Usage: cranky-build-sources [-c] [-f] [-h] [-n] [-o] POCKET|OFFSET|ABI

Build a set of kernel packages.

Positional arguments:
  POCKET       Get the previous package versions from pocket POCKET. Valid
               pockets: updates,release,security,proposed,proposed#1,proposed#2,build#1,build#2.
  OFFSET       Get the previous package versions from the changelogs using
               changelog entry offset OFFSET (-1 == previous changelog entry).
  ABI          Get the previous package versions from the changelogs using
               the newest changelog entry with abi number ABI.

Optional arguments:
  -c, --current  Only build the source package for the current directory.
  -f, --force    Force the build even if the repos are unclean.
  -h, --help     Show this help text and exit.
  -n, --no-orig  Don't require an orig source tarball.
  -o, --orig     Include the orig source tarball in the upload.
EOF
}

CRANKY=${CRANKY:-cranky}

current=0
force=0
prev_type=
prev_val=
build_opts=()

BO_META=()
BO_SIGNED=()
BO_LRM=()
BO_MAIN=()

while [ "${#}" -gt 0 ] ; do
	case "${1}" in
		-c|--current)
			current=1
			build_opts+=("--current")
			;;
		-f|--force)
			force=1
			;;
		-h|--help)
			usage
			exit
			;;
		-n|--no-orig)
			build_opts+=("--no-orig")
			;;
		-o|--orig)
			BO_MAIN+=("-sa")
			;;
		updates|release|security|proposed|proposed#1|proposed#2|build#1|build#2)
			if [ -n "${prev_type}" ] ; then
				echo "Invalid argument: ${1}" >&2
				exit 2
			fi
			prev_type=pocket
			prev_val=${1}
			;;
		-[1-9])
			if [ -n "${prev_type}" ] ; then
				echo "Invalid argument: ${1}" >&2
				exit 2
			fi
			prev_type=offset
			prev_val=${1#-}
			;;
		[0-9]*.[0-9]*.0-[0-9]*)
			if [ -n "${prev_type}" ] ; then
				echo "Invalid argument: ${1}" >&2
				exit 2
			fi
			prev_type=abi
			prev_val=${1}
			;;
		*)
			echo "Invalid argument: ${1}" >&2
			exit 2
			;;
	esac
	shift
done

if [ -z "${prev_type}" ] ; then
	usage
	exit 2
fi

trap out EXIT

if [ "${force}" -eq 0 ] ; then
	clean=1
	if [ ${current} -eq 1  ] ; then
		# Verify that then current source repo is clean
		if [ -n "$(git status --porcelain)" ] ; then
			echo "${PWD}: Repo is unclean" >&2
			clean=0
		fi
	else
		# Verify that all source repos are clean
		while IFS= read -r path ; do
			if [ -n "$(git -C "${path}" status --porcelain)" ] ; then
				echo "${path}: Repo is unclean" >&2
				clean=0
			fi
		done < <("${CRANKY}" shell-helper source-packages-path)
	fi
	if [ "${clean}" -eq 0 ] ; then
		echo "Use -f, --force to auto-clean before the build" >&2
		exit 1
	fi
fi

if [ "${prev_type}" = "pocket" ] ; then
	# Get the previous versions from the provided pocket
	found=0
	while IFS=' ' read -r package version rest ; do
		found=1
		set_pkg_build_opts "${package}" "${version}"
	done < <("${CRANKY}" rmadison -s -p "${prev_val}" .)

	if [ ${found} -eq 0 ] ; then
		echo "Invalid pocket: ${prev_val}" >&2
		exit 1
	fi
else
	# Get the previous versions from the changelogs
	while IFS= read -r path ; do
		if [ ${current} -eq 1 ] && [ "${path}" != "$(realpath .)" ] ; then
			continue
		fi

		DEBIAN=debian
		if [ -e "${path}"/debian/debian.env ] ; then
			# shellcheck disable=SC1091
			. "${path}"/debian/debian.env
		fi

		package=
		version=

		if [ "${prev_type}" = "offset" ] ; then
			# Use the provided offset
			package=$(dpkg-parsechangelog -l "${path}"/"${DEBIAN}"/changelog \
			          -o "${prev_val}" -c 1 -S source)
			version=$(dpkg-parsechangelog -l "${path}"/"${DEBIAN}"/changelog \
			          -o "${prev_val}" -c 1 -S version)
		elif [ "${prev_type}" = "abi" ] ; then
			# Use the provided ABI
			v=${prev_val%-*}
			v=${v//./\\.}
			u=${prev_val#*-}
			match=$(grep -m1 "^linux.* (${v}[-.]${u}\." \
			        "${path}"/"${DEBIAN}"/changelog)
			package=${match%% *}
			version=${match#* \(}
			version=${version%\) *}
		fi

		if [ -z "${package}" ] || [ -z "${version}" ] ; then
			echo "Failed to determine package and/or version" >&2
			exit 1
		fi

		set_pkg_build_opts "${package}" "${version}"
	done < <("${CRANKY}" shell-helper source-packages-path)
fi

if [ ${#BO_META[@]} -ne 0 ] ; then
	build_opts+=("--build-opts" "meta:${BO_META[*]}")
fi
if [ ${#BO_SIGNED[@]} -ne 0 ] ; then
	build_opts+=("--build-opts" "signed:${BO_SIGNED[*]}")
fi
if [ ${#BO_LRM[@]} -ne 0 ] ; then
	build_opts+=("--build-opts" "lrm:${BO_LRM[*]}")
fi
if [ ${#BO_MAIN[@]} -ne 0 ] ; then
	build_opts+=("--build-opts" "main:${BO_MAIN[*]}")
fi

echo -e "\e[33m${CRANKY} build-sources ${build_opts[*]}\e[0m"
"${CRANKY}" build-sources "${build_opts[@]}"
