#!/usr/bin/env python3
#
# Extract kernel break-fix data from the uct repo and write it to a json file
#

import json
import os
import re
import sys

import git

RE_CVE = re.compile(r"^CVE-[0-9]{4}-[0-9]+$")
RE_SHA = re.compile(r"^[0-9a-f]{12,}$")

uct_dir, linux_dir, outfile = sys.argv[1:]


class CVE:
    def __init__(self, fname):
        self.id = None
        self.patches = None
        self.break_fix = []

        with open(fname, encoding="UTF-8") as fh:
            for line in fh:
                comps = line.strip().split()
                if not comps:
                    continue

                if comps[0] == "Candidate:":
                    self.id = comps[1]
                    continue

                if comps[0].startswith("Patches_"):
                    if self.patches:
                        return
                    self.patches = comps[0].removeprefix("Patches_").strip(":")
                    continue

                if self.patches and comps[0] == "break-fix:":
                    if len(comps) != 3:
                        print(f"Suspect line in {fname}:", file=sys.stderr)
                        print(line, end="", file=sys.stderr)
                        continue
                    self.break_fix.append([comps[1]] + comps[2].split("|"))

    def to_json(self):
        return {
            "id": self.id,
            "patches": self.patches,
            "break-fix": self.break_fix,
        }


# ----------------------------------------------------------------------------------
# Main entry point

repo = git.Repo(linux_dir)

uct = {
    "commits": {},
    "cves": {},
}

p = os.path.join(uct_dir, "active")
for f in os.listdir(p):
    if not RE_CVE.match(f):
        continue

    # Load CVE from UCT
    cve = CVE(os.path.join(p, f))
    if cve.patches != "linux":
        continue

    # Add the CVE
    uct["cves"][cve.id] = cve.to_json()

    # Add all referenced commits
    for bf in cve.break_fix:
        for c in bf:
            cobj = None
            if RE_SHA.match(c):
                c = c[:12]
                try:
                    cobj = repo.commit(c)
                except Exception as e:
                    print(e, file=sys.stderr)

            entry = uct["commits"].get(c)
            if not entry:
                entry = {
                    "sha": cobj.hexsha if cobj else c,
                    "subject": cobj.summary if cobj else "",
                    "message": cobj.message if cobj else "",
                    "cves": [],
                }
            entry["cves"].append(cve.id)
            uct["commits"][c] = entry


with open(outfile, "w", encoding="UTF-8") as fh:
    json.dump(uct, fh)
