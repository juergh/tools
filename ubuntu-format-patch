#!/usr/bin/env python3
#
# Format patches for submission to an Ubuntu kernel mailing list
#

import gzip
import json
import os
import shutil
import sys
from datetime import datetime
from email.utils import format_datetime, make_msgid
from subprocess import check_call

import click
import requests
from debian.changelog import Changelog

import git

CACHEDIR = os.path.join(os.path.expanduser("~"), ".cache", "ubuntu-format-patch")


def get_debian_dir():
    if os.path.exists("debian/debian.env"):
        with open("debian/debian.env", encoding="utf-8") as fh:
            return fh.readline().split("=")[1].strip()
    return "debian"


def get_handle(debian_dir):
    with open(os.path.join(debian_dir, "changelog"), encoding="utf-8") as fh:
        ch = Changelog(fh, max_blocks=1)
    return ch.distributions, ch.package


def get_series_data(ks, series):
    for _, series_data in ks.items():
        if series_data.get("codename") == series:
            return series_data
    print(f"Error: Series '{series}' not found in kernel-series", file=sys.stderr)
    sys.exit(1)


def get_source_data(series_data, source):
    for _, source_data in series_data["sources"].items():
        for package, _ in source_data["packages"].items():
            if package == source:
                return source_data
    print(f"Error: Source '{source}' not found in kernel-series", file=sys.stderr)
    sys.exit(1)


class KernelPackage:
    def __init__(self, ks, handle):
        self.series, self.source = handle

        series_data = get_series_data(ks, self.series)
        source_data = get_source_data(series_data, self.source)

        series_devel = series_data.get("development", False)
        series_supported = series_data.get("supported", False)
        series_esm = series_data.get("esm", False)

        self.is_devel = source_data.get("development", series_devel)
        self.is_supported = source_data.get("supported", True) if series_supported else False
        self.is_esm = series_esm

    def subject_tag(self):
        """Return the patch subject tag for this kernel package"""
        s = self.series[0].upper()
        p = self.source.removeprefix("linux").removeprefix("-")
        if p:
            return f"{s}:{p}"
        return s


class Submission:
    def __init__(self, sid=None, init=False, subject=None, message_id=None):
        self.sid = sid or "default"
        self.dir = os.path.join(CACHEDIR, self.sid)
        self.info = {}
        self._ks = None

        if init:
            self.init(subject=subject, message_id=message_id)

        if not os.path.exists(self.dir):
            print("Error: Not initialized", file=sys.stderr)
            sys.exit(1)

        self.load()

    def load(self):
        """Load info from file"""
        with open(os.path.join(self.dir, "info.json"), encoding="utf-8") as fh:
            self.info = json.load(fh)

    def save(self):
        """Save info to file"""
        with open(os.path.join(self.dir, "info.json"), "w", encoding="utf-8") as fh:
            fh.write(json.dumps(self.info))

    def init(self, **kwargs):
        """Initialize environment"""
        if os.path.exists(self.dir):
            shutil.rmtree(self.dir)
        os.makedirs(self.dir)

        # Save initial info data
        self.info = kwargs
        self.save()

        # Save description file
        subject = kwargs["subject"] or ""
        with open(os.path.join(self.dir, "description"), "w", encoding="utf-8") as fh:
            fh.write(subject + "\n")

        # Cache kernel-series.json
        ks = os.path.join(self.dir, "ks.gz")
        r = requests.get("https://kernel.ubuntu.com/info/kernel-series.json.gz", timeout=5)
        with open(ks, "wb") as fh:
            fh.write(r.content)

    def ks(self):
        """Return cached kernel-series data"""
        if not self._ks:
            with gzip.open(os.path.join(self.dir, "ks.gz")) as fh:
                self._ks = json.load(fh)
        return self._ks


@click.group()
def cli():
    pass


@cli.command()
@click.option("--sid", help="Submission ID.")
@click.option("--subject", help="Email subject for patch submission.")
def init(sid, subject):
    """Initialize a new patchset submission."""
    Submission(sid=sid, init=True, subject=subject, message_id=make_msgid())


@cli.command()
@click.option("--sid", help="Submission ID.")
@click.argument("revision-range", nargs=-1, type=click.UNPROCESSED)
def format_patch(sid, revision_range):
    """Format patches."""
    sub = Submission(sid=sid)
    repo = git.Repo()

    debian_dir = get_debian_dir()
    handle = get_handle(debian_dir)
    kp = KernelPackage(sub.ks(), handle)

    ktag = kp.subject_tag()

    if kp.is_supported:
        subject_prefix = f"SRU][{ktag}][PATCH"
        sub.info["sru"] = True
        sub.save()
    else:
        subject_prefix = f"{ktag}][PATCH"

    out_dir = os.path.join(sub.dir, ktag)
    if os.path.exists(out_dir):
        shutil.rmtree(out_dir)

    # Create the patchset
    opts = [
        f"--output-directory={out_dir}",
        "--cover-letter",
        "--cover-from-description=subject",
        f"--description-file={sub.dir}/description",
        "--thread=shallow",
        f"--in-reply-to={sub.info['message_id']}",
        f"--subject-prefix={subject_prefix}",
    ] + list(revision_range)
    repo.git.format_patch(opts)


@cli.command()
@click.option("--sid", help="Submission ID.")
def format_thread(sid):
    """Format thread."""
    sub = Submission(sid=sid)
    repo = git.Repo()

    # Collect the patchsets
    patchsets = []
    for item in sorted(os.listdir(sub.dir), reverse=True):
        if os.path.isdir(os.path.join(sub.dir, item)):
            patchsets.append(item)

    if not patchsets:
        print("Error: No patchsets found", file=sys.stderr)
        sys.exit(1)

    name = repo.config_reader().get_value("user", "name")
    email = repo.config_reader().get_value("user", "email")
    date = format_datetime(datetime.now().astimezone())

    # Construct the subject
    if sub.info.get("sru"):
        subject = "[SRU]"
    else:
        subject = ""
    subject += "[" + "][".join(patchsets) + "]"
    subject += "[PATCH 0/" + str(len(patchsets)) + "]"
    subject += " " + sub.info["subject"]

    # Generate the cover letter
    cover_letter = os.path.join(sub.dir, "0000-cover-letter.patch")
    with open(cover_letter, "w", encoding="utf-8") as fh:
        fh.write(f"From {email} Mon Sep 17 00:00:00 2001\n")
        fh.write(f"Message-ID: {sub.info['message_id']}\n")
        fh.write(f"From: {name} <{email}>\n")
        fh.write(f"Date: {date}\n")
        fh.write(f"Subject: {subject}\n")
        fh.write("\n")
        fh.write("*** BLURB HERE ***\n")
        fh.write("\n")


@cli.command()
@click.option("--sid", help="Submission ID.")
@click.option("--print", "print_", is_flag=True, help="Print the cover letter.")
def edit_cv(sid, print_):
    """Edit patch submission cover letter."""
    sub = Submission(sid=sid)
    cover_letter = os.path.join(sub.dir, "0000-cover-letter.patch")

    if print_:
        with open(cover_letter, encoding="utf-8") as fh:
            print(fh.read(), end="")
        return
    os.system(f"{os.getenv('EDITOR')} {cover_letter}")


@cli.command()
@click.option("--sid", help="Submission ID.")
@click.option("--dry-run", is_flag=True)
@click.option("--to")
def send_email(sid, dry_run, to):
    """Send that patches to the mailing list."""
    sub = Submission(sid=sid)
    # repo = git.Repo()

    patches = [os.path.join(sub.dir, "0000-cover-letter.patch")]
    for item in sorted(os.listdir(sub.dir), reverse=True):
        d = os.path.join(sub.dir, item)
        if os.path.isdir(d):
            for f in sorted(os.listdir(d)):
                if not f.endswith(".patch"):
                    continue
                patches.append(os.path.join(d, f))

    if not to:
        to = "kernel-team@lists.ubuntu.com"

    opts = ["--dry-run"] if dry_run else []
    opts += [
        "--suppress-cc=all",
        f"--to={to}",
    ] + patches

    cmd = ["git", "send-email"] + opts
    print(cmd)
    print()

    check_call(cmd)


@cli.command()
@click.option("--sid", help="Submission ID.")
def list_patches(sid):
    """List patches."""
    sub = Submission(sid=sid)

    cover_letter = "0000-cover-letter.patch"

    patches = []
    if os.path.exists(os.path.join(sub.dir, cover_letter)):
        patches.append(cover_letter)

    for item in sorted(os.listdir(sub.dir), reverse=True):
        d = os.path.join(sub.dir, item)
        if os.path.isdir(d):
            for f in sorted(os.listdir(d)):
                if not f.endswith(".patch"):
                    continue
                patches.append(f"{item}/{f}")

    print("\n".join(patches))


if __name__ == "__main__":
    cli()
