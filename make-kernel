#!/bin/bash -eu
#
# Build a kernel in a chroot
#


function out()
{
	local rc=$?

	trap - INT TERM EXIT HUP

	if [ ${rc} -eq 0 ] ; then
		echo -e "\e[32mCompilation succeeded\e[0m"
	else
		echo -e "\e[31mCompilation failed\e[0m" >&2
	fi

	exit "${rc}"
}


function run_in_schroot()
{
	local cmd

	if [ "${SUDO}" -eq 1 ] ; then
		cmd=("sudo")
	else
		cmd=()
	fi
	cmd+=("${@}")

	if [ "${SCHROOT}" = "None" ] ; then
		"${cmd[@]}"
		return
	fi

	# FIXME: Silence chroot warnings
	export LANG=
	export LC_TIME=POSIX
	export LC_MONETARY=POSIX
	export LC_COLLATE=POSIX
	export LC_ADDRESS=POSIX
	export LC_TELEPHONE=POSIX
	export LC_NAME=POSIX
	export LC_MEASUREMENT=POSIX
	export LC_IDENTIFICATION=POSIX
	export LC_NUMERIC=POSIX
	export LC_PAPER=POSIX

	echo
	echo "+++ Running in '${SCHROOT}': ${cmd[*]}"
	echo

	if [ "${DRY_RUN}" -eq 0 ] ; then
		schroot -p -r -c "${SCHROOT}" -- "${cmd[@]}"
	fi
}


function print_vars()
{
	local var

	for var in "${@}" ; do
		if [[ "$(declare -p "${var}" 2>/dev/null)" =~ "declare -a" ]] ; then
			arr="${var}[@]"
			val=${!arr:-}
		else
			val=${!var:-}
		fi
		printf "%-13s : %s\n" "${var}" "${val}"
	done
}


function need_cross_compilation()
{
	local schroot_arch

	schroot_arch=${SCHROOT#*-}

	# Need to cross compile if the schroot and the deb architectures differ,
	# unless we're building an i386 kernel in an amd64 schroot
	if [ "${SCHROOT}" = "None" ] || \
	   [ "${schroot_arch}" = "${DEB_ARCH}" ] || \
	   { [ "${schroot_arch}" = "amd64" ] && \
		 [ "${DEB_ARCH}" = "i386" ] ; } ; then
		# No need to cross compile
		return 1
	else
		# Need to cross compile
		return 0
	fi
}


function get_upstream_schroot()
{
	local version patchlevel series revision

	version=$(awk '/^VERSION = / { print $3 ; exit }' Makefile)
	patchlevel=$(awk '/^PATCHLEVEL = / { print $3 ; exit }' Makefile)
	revision=${version}.${patchlevel}

	# The schroot distro, based on the kernel version
	case "${revision}" in
		3.[0-9])        series=precise ;;
		3.[1-9][0-9])   series=trusty ;;
		4.[0-9])        series=xenial ;;
		4.1[0-7])       series=bionic ;;
		5.4)            series=focal ;;
		5.8)            series=groovy ;;
		5.10|5.11|5.13) series=hirsute ;;
		5.15)           series=jammy ;;
		5.19|6.0)       series=kinetic ;;
		6.8)            series=noble ;;
		6.11)           series=oracular ;;
		6.14)           series=plucky ;;
		*)
			echo "+++ Error: Failed to determine chroot for" \
				 "kernel ${revision}" >&2
			exit 1
			;;
	esac

	echo "${USER}--${series}-amd64"
}


function build_upstream_kernel()
{
	local arch target buildd found

	# Use the default schroot
	SCHROOT=${SCHROOT:-$(get_upstream_schroot)}

	# The kernel build architecture and default target
	case "${DEB_ARCH}" in
		amd64)
			arch=x86_64
			target=bzImage
			;;
		arm64)
			arch=arm64
			target=Image.gz
			;;
		armhf)
			arch=arm
			target=zImage
			;;
		i386)
			arch=i386
			target=bzImage
			;;
		powerpc)
			arch=powerpc
			target=zImage
			;;
		ppc64el)
			arch=powerpc
			target=vmlinux
			;;
		*)
			echo "+++ Error: Unsupported arch: ${DEB_ARCH}" >&2
			exit 1
			;;
	esac

	# Export the target arch
	export ARCH=${arch}

	# Use the default target
	if [ ${#TARGET[@]} -eq 0 ] ; then
		TARGET=("${target}")
	fi

	# Exports for cross-compilation (doing this here only works if the schroots
	# are configured to preserve the environment)
	if need_cross_compilation ; then
		# shellcheck disable=SC2046
		export $(dpkg-architecture -a "${DEB_ARCH}" 2>/dev/null)
		export CROSS_COMPILE=${DEB_HOST_GNU_TYPE}-
	fi

	# Create the out-of-tree build directory and copy the config file
	buildd="$(readlink -m "buildd/${DEB_ARCH}")"
	if ! [ -d "${buildd}" ] ; then
		mkdir -p "${buildd}"
	fi

	# Number of parallel gcc build jobs
	found=0
	for arg in "${ARGS[@]}" ; do
		if [ "${arg#-j}" != "${arg}" ] ; then
			found=1
			break
		fi
	done
	if [ ${found} -eq 0 ] ; then
		ARGS+=("-j$(getconf _NPROCESSORS_ONLN)")
	fi

	# Print interesting variables
	print_vars SCHROOT DEB_ARCH TARGET ARCH CROSS_COMPILE ARGS

	# Copy/generate the config file
	if [ -e "${CONFIG}" ] ; then
		cp "${CONFIG}" "${buildd}/.config"
	elif ! [ -e "${buildd}"/.config ] ; then
		run_in_schroot  make O="${buildd}" clean defconfig
	fi

	# Finally kick off the build
	run_in_schroot make O="${buildd}" "${ARGS[@]}" "${TARGET[@]}"
}


function get_ubuntu_schroot()
{
	local series

	# shellcheck disable=SC1091
	. debian/debian.env
	series=$(dpkg-parsechangelog -l "${DEBIAN}/changelog" -S Distribution)
	if [ "${series}" = "UNRELEASED" ] ; then
		series=$(dpkg-parsechangelog -l "${DEBIAN}/changelog" \
									 -S Distribution -o 1 -c 1)
	fi

	if [ "${series}" = "precise" ] && [ "${DEB_ARCH}" = "powerpc" ] ; then
		# Can't do powerpc cross-compilation in a Precise schroot
		echo "${series}-powerpc"
	else
		echo "${series}-amd64"
	fi
}


function build_ubuntu_kernel()
{
	# Use the default schroot if unspecified
	SCHROOT=${SCHROOT:-$(get_ubuntu_schroot)}

	# Use the default target if unspecified
	if [ ${#TARGET[@]} -eq 0 ] ; then
		TARGET=("clean" "build")
	fi

	# Exports for cross-compilation (doing this here only works if the schroots
	# are configured to preserve the environment)
	if need_cross_compilation ; then
		# shellcheck disable=SC2046
		export $(dpkg-architecture -a "${DEB_ARCH}" 2>/dev/null)
		export CROSS_COMPILE=${DEB_HOST_GNU_TYPE}-
	fi

	# Print interesting variables
	print_vars SCHROOT DEB_ARCH TARGET CROSS_COMPILE

	# Finally kick off the build
	if ! [ -e debian/control ] ; then
		run_in_schroot debian/rules debian/control
	fi
	run_in_schroot fakeroot debian/rules "${TARGET[@]}"
}


function usage()
{
	cat << EOF
Usage: make-kernel [-a ARCH] [-d] [-h] [-s SCHROOT] [-u] [TARGET [TARGET]...]
       make-kernel [-a ARCH] [-c CONFIG] [-d] [-h] [-s SCHROOT]
                   [TARGET [TARGET]...] [-- MAKE_OPTS]

Build an upstream or Ubuntu kernel in a schroot.

Postinal arguments:
  TARGET     The (list of) build target(s). If not specified, defaults to the
             kernel build target for the selected architecture (for example
             'bzImage' for amd64) or to the 'clean build' targets when building
             an Ubuntu kernel.
  MAKE_OPTS  Additional options that are passed to the kernel's Makefile.

Optional arguments:
  -a, --arch ARCH         Build kernel for architecture ARCH.
  -c, --config CONFIG     Use config file CONFIG instead of .config.
  -d, --dry-run           Show the build command but don't execute it.
  -h, --help              Show this help text.
  -r, --root
  -s, --schroot SCHROOT   Use schroot SCHROOT for the build. Use 'None' to not
                          use a schroot.
  -u, --ubuntu            Build an Ubuntu kernel.
EOF
	exit 2
}


# -----------------------------------------------------------------------------
# Parse the commandline

DEB_ARCH=$(dpkg-architecture -q DEB_HOST_ARCH)
CONFIG=
DRY_RUN=0
SCHROOT=
TARGET=()
UBUNTU=0
ARGS=()
SUDO=0

while [ $# -gt 0 ] ; do
	case "${1}" in
		-a|--arch)
			shift
			DEB_ARCH=${1}
			;;
		-c|--config)
			shift
			CONFIG=${1}
			;;
		-d|--dry-run)
			DRY_RUN=1
			;;
		-h|--help)
			usage
			;;
		-r|--root)
			SUDO=1
			;;
		-s|--schroot)
			shift
			SCHROOT=${1}
			;;
		-u|--ubuntu)
			UBUNTU=1
			;;
		--)
			shift
			ARGS=("${@}")
			break
			;;
		-*)
			echo "+++ Error: Unknown option: ${1}" >&2
			exit 1
			;;
		*)
			TARGET+=("${1}")
			;;
	esac
	shift
done

trap out INT TERM EXIT HUP

if [ -n "${CONFIG}" ] && ! [ -e "${CONFIG}" ] ; then
	echo "+++ Error: Config file not found: ${CONFIG}" >&2
	exit 1
fi

if [ ${UBUNTU} -eq 1 ] ; then
	build_ubuntu_kernel 2>&1 | tee "make-kernel-${DEB_ARCH}.log"
else
	build_upstream_kernel 2>&1 | tee "make-kernel-${DEB_ARCH}.log"
fi
