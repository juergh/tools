#!/usr/bin/env python3

import argparse
import re
import sys
import textwrap
import time

import git
import requests


def wrap_line(line, width=0):
    """Wrap and indent a line"""
    if width == 0:
        yield line
        return

    # Prevent wrapping in LP and //
    line = line.replace("LP: ", "LP__").replace(" //", "_//")

    indent = ""
    for text in textwrap.wrap(line, width - 4):
        text = text.replace("LP__", "LP: ").replace("_//", " //")
        yield indent + text

        if not indent:
            if text.startswith("* "):
                indent = "  "
            elif text.startswith("  - "):
                indent = "    "
            else:
                raise CrankyException()


def url_get(url, **kwargs):
    """http get with retries"""
    for _ in range(2):
        try:
            resp = requests.get(url, **kwargs)
            if resp.status_code not in (429, 500, 502, 503, 504):
                return resp
        except requests.exceptions.ConnectionError:
            pass
        time.sleep(2)
    raise CrankyException(f"Failed to get {url}")


def get_title_from_lp(bug, timeout=5):
    """Get a bug title from Launchpad"""
    url = f"https://api.launchpad.net/devel/bugs/{bug}"
    resp = url_get(url, timeout=timeout)
    if resp.status_code == 200:
        data = resp.json()
        title = data["title"]
        for line in data.get("description", "").split("\n"):
            if line.startswith("Kernel-Description:"):
                title = line.split(" ", 1)[1]
                break
    else:
        title = "INVALID or PRIVATE BUG"

    return f"{title} (LP: #{bug})"


def maybe_reversed(seq, reverse=False):
    """Return a reversed list (or not)"""
    if not seq or not reverse:
        return seq
    return reversed(seq)


class CrankyException(Exception):
    pass


class CommitEntry:
    def __init__(self, commit):
        self.commit = commit
        self.subject = None
        self.bugs = []
        self.cves = []
        self.ignore = False
        self.key = None

        self._parse_message()
        self._generate_key()

    def _parse_message(self):
        """Parse the commit message and fill in the blanks"""
        message = [m.strip() for m in self.commit.message.split("\n")]

        self.subject = message[0]
        self.bugs = set()
        self.cves = set()

        for line in message[1:]:
            # BugLink
            if line.startswith("BugLink: "):
                bits = line.split(" ", 2)
                if len(bits) > 2:
                    # There is text after the URL, so use that (after stripping the
                    # enclosing characters)
                    self.bugs.add(bits[2][1:-1])
                elif "launchpad.net" in bits[1]:
                    # Extract the bug number from the Launchpad URL
                    bug = bits[1].split("/")[-1]
                    self.bugs.add(bug)
                else:
                    raise CrankyException(f"Invalid BugLink: {line}")
                continue

            # CVE
            if line.startswith("CVE-"):
                self.cves.add(line)
                continue

            # Ignore
            if line.replace(" ", "").lower() in ("ignore:yes", "ignore:true"):
                self.ignore = True
                continue

            # Properties
            if line.startswith("Properties:"):
                for prop in line.split(" ")[1:]:
                    if prop in ("ignore", "no-changelog"):
                        self.ignore = True
                        break
                continue

        self.bugs = list(self.bugs)
        self.cves = list(self.cves)

    def _generate_key(self):
        """Generate a key for later sorting and combining"""
        if self.subject == "UBUNTU: link-to-tracker: update tracking bug":
            self.key = "__tracker__"
        elif self.bugs or self.cves:
            # Make this a tuple so it's hashable
            self.key = tuple(sorted(self.bugs + self.cves))
        elif self.subject.startswith("UBUNTU"):
            self.key = "__ubuntu__"
        else:
            self.key = "__mainline__"


class CommitSet:
    def __init__(self, version=None):
        self.version = version
        self.empty = True
        self.tracker = None
        self.ubuntu = []
        self.mainline = []
        self.fixes = {}
        self.fixes_keys = []

    def add(self, entry):
        """Add a single commit entry to the set"""
        if entry.ignore:
            return

        # Commit set is no longer empty
        self.empty = False

        if entry.key == "__tracker__":
            if self.tracker:
                raise CrankyException("Only one tracking bug allowed")
            self.tracker = entry
            return

        if entry.key == "__ubuntu__":
            self.ubuntu.append(entry)
            return

        if entry.key == "__mainline__":
            self.mainline.append(entry)
            return

        # Collect all entries with same BugLink and CVE tags into separate lists
        if entry.key not in self.fixes_keys:
            self.fixes_keys.append(entry.key)
            self.fixes[entry.key] = []
        self.fixes[entry.key].append(entry)

    def changes(self, reverse=False):
        """Yield the list of changes in this set"""
        # 1. log entry: tracking bug
        if self.tracker:
            bug = self.tracker.bugs[0]
            title = get_title_from_lp(bug)
            yield "* " + title

        # 2. log entry: BugLink and CVE fixes
        for key in self.fixes_keys:
            title = []
            for token in key:
                if token.isdigit():
                    title.append(get_title_from_lp(token))
                else:
                    title.append(token)
            yield "* " + " // ".join(title)
            for entry in maybe_reversed(self.fixes[key], reverse):
                yield "  - " + entry.subject.removeprefix("UBUNTU:").strip()

        # 3. log entry: Misc Ubuntu changes
        if self.ubuntu:
            yield "* Miscellaneous Ubuntu changes"
            for entry in maybe_reversed(self.ubuntu, reverse):
                yield "  - " + entry.subject.removeprefix("UBUNTU:").strip()

        # 4. log entry: Misc upstream changes
        if self.mainline:
            yield "* Miscellaneous upstream changes"
            for entry in maybe_reversed(self.mainline, reverse):
                yield "  - " + entry.subject

    def log(self, width=0, header=False, spacers=False, reverse=False):
        """Yield a formatted log of the changes in this set"""
        # Yield the header
        if header and self.version:
            h = re.sub(r"(\D)-(\d)", r"\1: \2", self.version, count=1)
            yield "[ " + h + " ]"
            yield ""

        # Yield the changes
        first = True
        for line in self.changes(reverse=reverse):
            if spacers and not first and line.startswith("* "):
                yield ""
            yield from wrap_line(line, width=width)
            first = False


def print_commit_set(commit_set, first_set=True, **kwargs):
    """Print the log of a commit set"""
    spacers = kwargs.get("spacers", False)
    first = True
    for line in commit_set.log(**kwargs):
        if spacers and first and not first_set:
            print()
        print(line, flush=True)
        first = False


def main():
    """Main entry point"""
    parser = argparse.ArgumentParser()
    parser.add_argument("--width", type=int, default=0)
    parser.add_argument("--headers", action="store_true")
    parser.add_argument("--spacers", action="store_true")
    parser.add_argument("--reverse", action="store_true")
    parser.add_argument("rev_range", nargs="*", default=["HEAD"])
    args = parser.parse_args()

    kwargs = {
        "width": args.width,
        "header": args.headers,
        "spacers": args.spacers,
        "reverse": args.reverse,
    }

    commit_set = CommitSet()
    first_set = True

    for commit in git.Repo().iter_commits(args.rev_range):
        # Load the commit
        entry = CommitEntry(commit)

        # New release commit
        if entry.subject.startswith("UBUNTU: Ubuntu-"):
            if not commit_set.empty:
                # Print the current set
                print_commit_set(commit_set, first_set=first_set, **kwargs)
                first_set = False

            # Initialize a new set
            commit_set = CommitSet(entry.subject.removeprefix("UBUNTU:").strip())
            continue

        # Add the commit to the current set
        commit_set.add(entry)

    print_commit_set(commit_set, first_set=first_set, **kwargs)


if __name__ == "__main__":
    sys.exit(main())
