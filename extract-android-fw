#!/bin/bash -eu
#
# Extract image files from a system image
# Usage: extract-firmware.sh fw/dubai
#

ET_BINDIR=${HOME}/android/lineage/prebuilts/extract-tools/linux-x86/bin

SIMG2IMG=${ET_BINDIR}/simg2img
LPUNPACK=${ET_BINDIR}/lpunpack
OTA_EXTRACTOR=${ET_BINDIR}/ota_extractor

KBT_BINDIR=${HOME}/android/lineage/prebuilts/kernel-build-tools/linux-x86/bin
MKDTIMG=${KBT_BINDIR}/mkdtimg

MKBOOTIMG_DIR=${HOME}/android/lineage/system/tools/mkbootimg
UNPACK_BOOTIMG=${MKBOOTIMG_DIR}/unpack_bootimg.py

function out()
{
	local rc=${?}

	trap - EXIT INT TERM HUP

	if [ ${rc} -eq 0 ] ; then
		echo "-- Firmware extraction done"
	else
		echo "-- Error: Firmware extraction failed" >&2
	fi

	exit "${rc}"
}

function extract_img_data()
{
	local image_file="$1"
	local out_dir="$2"

	rm -rf "$out_dir"
	mkdir -p "$out_dir"

	rm -f debugfs.log
	debugfs -R 'ls -p' "$image_file" 2>/dev/null | cut -d '/' -f6 | while read -r entry
	do
		debugfs -R "rdump \"$entry\" \"$out_dir\"" "$image_file" >> debugfs.log 2>&1 || {
			echo "[-] Failed to extract data from '$image_file'"
			abort 1
		}
	done

	local symlink_err="rdump: Attempt to read block from filesystem resulted in short read while reading symlink"
	if grep -Fq "$symlink_err" debugfs.log; then
		echo "[-] Symlinks have not been properly processed from $image_file"
		echo "[!] You might not have a compatible debugfs version"
		abort 1
	fi
}

function extract_super()
{
	local outfile=${1}
	shift

	echo "-- Extract super.raw"
	"${SIMG2IMG}" "${@}" "${outfile}"
}

function lpunpack_parts()
{
	local outdir=${1} infile=${2}
	local part part_img

	for part in "system" "odm" "product" "system_ext" "vendor" ; do
		part_img=${outdir}/${part}.img
		if [ -e "${part_img}" ] ; then
			continue
		fi

		echo "-- Prepare ${part}.img"
		if "${LPUNPACK}" -p "${part}"_a "${infile}" "${outdir}" ; then
			mv "${outdir}"/"${part}"_a.img "${part_img}"
		else
			"${LPUNPACK}" -p "${part}" "${infile}" "${outdir}"
		fi
	done
}

function extract_parts()
{
	local outdir=${1}
	local part part_img part_outdir part_raw

	for part in "system" "odm" "product" "system_ext" "vendor" ; do
		part_img=${outdir}/${part}.img
		if ! [ -e "${part_img}" ]; then
			continue
		fi

		part_outdir=${outdir}/${part}
		rm -rf "${part_outdir}"

		echo "-- Extract ${part}.img"
		case "$(file -b "$part_img")" in
			EROFS*)
				fsck.erofs --extract="${part_outdir}" "${part_img}"
				;;
			Linux*)
				extract_img_data "${part_img}" "${part_outdir}"
				;;
			Android*)
				part_raw=${outdir}/${part}.raw
				"${SIMG2IMG}" "${part_img}" "${part_raw}"
				extract_img_data "${part_raw}" "${part_outdir}"
				;;
			*)
				echo "Unsupported ${part_img}"
				;;
		esac
	done
}

function extract_dtbo()
{
	local outdir=${1}
	local dtbo_img

	dtbo_img=${outdir}/dtbo.img
	if ! [ -e "${dtbo_img}" ]; then
		dtbo_img=${outdir}/../dtbo.img
		if ! [ -e "${dtbo_img}" ]; then
			return
		fi
	fi

	dtbo_outdir=${outdir}/dtbo
	rm -rf "${dtbo_outdir}"
	mkdir -p  "${dtbo_outdir}"

	echo "-- Extract dtbo.img"
	"${MKDTIMG}" dump "${dtbo_img}" -b "${dtbo_outdir}"/dtbo
	for f in  "${dtbo_outdir}"/dtbo.* ; do
		if [ -e "${f}" ] ; then
			ln -s "${f##*/}" "${dtbo_outdir}"/"${f##*.}".dtb
		fi
	done

	for f in  "${dtbo_outdir}"/*.dtb ; do
		if [ -e "${f}" ] ; then
			echo "-- Convert ${f}"
			dtc -I dtb -O dts -o "${f%.dtb}".dts "${f}"
		fi
	done
}

function extract_bootimg()
{
	local outdir=${1}
	local boot_img

	boot_img=${outdir}/boot.img
	if ! [ -e "${boot_img}" ]; then
		boot_img=${outdir}/../boot.img
		if ! [ -e "${boot_img}" ]; then
			return
		fi
	fi

	echo "-- Extract boot.img"
	"${UNPACK_BOOTIMG}" --boot_img "${boot_img}" --out "${outdir}"/boot

	ramdisk_img="${outdir}"/boot/ramdisk
	if [ -e "${ramdisk_img}" ] ; then
		echo "-- Extract ramdisk"
		mkdir -p "${ramdisk_img}".d
		lz4cat "${ramdisk_img}" | ( cd "${ramdisk_img}".d && cpio -i )
	fi
}

indir=${1}

if ! [ -d "${indir}" ] ; then
	echo "-- No such directory: ${indir}" >&2
	exit 1
fi

trap out EXIT INT TERM HUP

outdir=${indir}/extract
mkdir -p "${outdir}"

if [ -e "${indir}"/payload.bin ] ; then
	echo "-- Extract payload.bin"
	"${OTA_EXTRACTOR}" -payload "${indir}/"payload.bin -output_dir "${outdir}"
else
	readarray -t infiles < <(find "${indir}" -name 'super.img_sparsechunk.*' | sort -V)
	extract_super "${outdir}"/super.raw "${infiles[@]}"
	lpunpack_parts "${outdir}" "${outdir}"/super.raw
fi

extract_parts "${outdir}"
extract_dtbo "${outdir}"
extract_bootimg "${outdir}"
