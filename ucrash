#!/bin/bash -eu
#
# ucrash: Wrapper script for the crash tool to analyze Ubuntu kernel crashes.
#         Used in conjunction with upkg.
#

# -----------------------------------------------------------------------------
# Function declarations

function pr_info()
{
	echo -e "\e[0;33m$(printf "%-19s : %s\n" "${1}" "${2}")\e[0m"
}

function pr_error()
{
	echo -e "\e[0;31mError: ${*}\e[0m" >&2
	exit 1
}

function lookup_arch()
{
	local arch=${1}

	case "${arch,,}" in
		*s/390*|s390x)
			echo "s390x"
			;;
		*64-bit*powerpc*)
			echo "ppc64el"
			;;
		x86-64|x86_64)
			echo "amd64"
			;;
		*)
			pr_error "Unknown architecture: ${arch}"
			;;
	esac
}

function lookup_source()
{
	local version=${1} flavor=${2}
	local major suffix

	suffix=
	if [ "${version/\~/}" != "${version}" ] ; then
		major=${version%.0-*}
		suffix="-hwe-${major}"
	fi

	case "${flavor}" in
		ibm-gt)
			echo "linux-ibm-gt"
			;;
		generic)
			echo "linux${suffix}"
			;;
		*)
			pr_error "Unknown kernel flavor: ${flavor}"
			;;
	esac
}

function parse_linux_version()
{
	local linux_version=${1}

	DUMP_RELEASE=${linux_version#Linux version }
	DUMP_RELEASE=${DUMP_RELEASE%% *}

	DUMP_BASE=${DUMP_RELEASE%%-*}

	DUMP_ABI=${DUMP_RELEASE#*-}
	DUMP_ABI=${DUMP_ABI%%-*}
	DUMP_ABI=${DUMP_BASE}-${DUMP_ABI}

	DUMP_FLAVOR=${DUMP_RELEASE#"${DUMP_ABI}"-}

	DUMP_UPLOAD=${linux_version##* #}
	DUMP_UPLOAD=${DUMP_UPLOAD%%-*}
	DUMP_UPLOAD=${DUMP_UPLOAD%% *}

	DUMP_VERSION=${DUMP_ABI}.${DUMP_UPLOAD}

	DUMP_SOURCE=$(lookup_source "${DUMP_VERSION}" "${DUMP_FLAVOR}")
 }

function parse_debug_kernel()
{
	local arch linux_version

	# Determine the architecture
	arch=$(file "${DEBUG_KERNEL}")
	arch=${arch%%, version *}
	arch=${arch##*, }
	DUMP_ARCH=$(lookup_arch "${arch}")

	# Get the Linux version from the debug kernel
	if ! linux_version=$(strings "${DEBUG_KERNEL}" | \
							 grep -m 1 '^Linux version ') ; then
		pr_error "No Linux version found in debug kernel"
	fi

	parse_linux_version "${linux_version}"
}

function parse_kdump()
{
	local header=("$@")
	local arch

	# Determine the architecture
	arch=${header[5]}
	DUMP_ARCH=$(lookup_arch "${arch}")

	DUMP_RELEASE=${header[3]}

	DUMP_BASE=${DUMP_RELEASE%%-*}

	DUMP_ABI=${DUMP_RELEASE#*-}
	DUMP_ABI=${DUMP_ABI%%-*}
	DUMP_ABI=${DUMP_BASE}-${DUMP_ABI}

	DUMP_FLAVOR=${DUMP_RELEASE#"${DUMP_ABI}"-}

	DUMP_UPLOAD=${header[4]%% *}
	DUMP_UPLOAD=${DUMP_UPLOAD%-*}
	DUMP_UPLOAD=${DUMP_UPLOAD:1}

	DUMP_VERSION=${DUMP_ABI}.${DUMP_UPLOAD}

	DUMP_SOURCE=$(lookup_source "${DUMP_VERSION}" "${DUMP_FLAVOR}")
}

function parse_core()
{
	local linux_version

	# Determine the architecture
	arch=$(file "${DUMP_FILE}")
	arch=${arch%%, version *}
	arch=${arch##*, }
	DUMP_ARCH=$(lookup_arch "${arch}")

	# Get the Linux version from the debug kernel
	if ! linux_version=$(strings "${DUMP_FILE}" | \
							 grep -m 1 '^Linux version ') ; then
		pr_error "No Linux version found in dumpfile"
	fi

	parse_linux_version "${linux_version}"
}

function parse_makedumpfile()
{
	local header=("$@")
	local arch

	# Determine the architecture
	arch=${header[2]}
	DUMP_ARCH=$(lookup_arch "${arch}")
}

function parse_dump_file()
{
	local header

	readarray -t header < <(strings "${DUMP_FILE}" | head -10)

	if [ "${header[0]}" = "KDUMP   " ] ; then
		parse_kdump "${header[@]}"
	elif [ "${header[1]}" = "KDUMP   " ] ; then
		parse_kdump "${header[@]:1}"
	elif [ "${header[0]}" = "CORE" ] ; then
		 parse_core
	elif [ "${header[0]}" = "makedumpfile" ] ; then
		parse_makedumpfile "${header[@]}"
	else
		pr_error "Failed to parse dumpfile"
	fi
}

function run_crash()
{
	local kernel_bin_root
	local debug_kernel debug_modules kernel_source
	local chroot_list chroot crash_cmd crash_version crash_opts
	local build_path infile
#	local system_map

	pr_info "dump file" "${DUMP_FILE}"

	pr_info "dump kernel arch"    "${DUMP_ARCH}"
	pr_info "dump kernel release" "${DUMP_RELEASE}"
	pr_info "dump kernel base"    "${DUMP_BASE}"
	pr_info "dump kernel abi"     "${DUMP_ABI}"
	pr_info "dump kernel flavor"  "${DUMP_FLAVOR}"
	pr_info "dump kernel upload"  "${DUMP_UPLOAD}"
	pr_info "dump kernel version" "${DUMP_VERSION}"
	pr_info "dump kernel source"  "${DUMP_SOURCE}"

	# upkg kernel root directory
	kernel_bin_root=${UPKG_DIR}/${DUMP_SOURCE}/${DUMP_VERSION}/${DUMP_ARCH}/${DUMP_FLAVOR}

	# Debug kernel, modules, system map and source code location
	debug_kernel=${kernel_bin_root}/usr/lib/debug/boot/vmlinux-${DUMP_RELEASE}
	debug_modules=${kernel_bin_root}/usr/lib/debug/lib/modules/${DUMP_RELEASE}
#	system_map=${kernel_bin_root}/boot/System.map-${DUMP_RELEASE}
	kernel_source=${UPKG_DIR}/${DUMP_SOURCE}/${DUMP_VERSION}/all/src

	# A debug kernel was specified on the commandline and it does *not* match
	# the corresponding upkg kernel
	if [ -n "${DEBUG_KERNEL}" ] && \
		   ! cmp -s "${DEBUG_KERNEL}" "${debug_kernel}" ; then
		debug_kernel=${DEBUG_KERNEL}
		debug_modules=
#		system_map=
		kernel_source=
	fi

	pr_info "debug kernel"  "${debug_kernel}"
	pr_info "debug modules" "${debug_modules}"
#	pr_info "system map"    "${system_map}"
	pr_info "kernel source" "${kernel_source}"

	# Set the chroot to run crash in
	chroot=
	if [ -n "${CHROOT}" ] ; then
		chroot=${CHROOT}
	elif [ "${DUMP_ARCH}" != "$(dpkg --print-architecture)" ] ; then
		# We need to run crash in a chroot if the dump architecture is
		# different from the host architecture
		readarray -t chroot_list < <(schroot -l | \
									 grep -P "^chroot:.*-${DUMP_ARCH}$" | \
									 sed -e 's,^chroot:,,')

		if [ "${#chroot_list[@]}" -eq 0 ] ; then
			pr_error "No chroot found for arch: ${DUMP_ARCH}"
		fi
		# TODO: Which one to use when there are multiples?
		chroot=${chroot_list[0]}
	fi

	# Assemble the crash command and get its version
	crash_cmd=()
	if [ -n "${CRASH}" ] ; then
		crash_cmd=("${CRASH}")
	else
		if [ -n "${chroot}" ] ; then
			pr_info "chroot" "${chroot}"
			crash_cmd=("schroot" "-p" "-c" "${chroot}" "--")
		fi
		if ! crash_cmd+=("$("${crash_cmd[@]}" which crash)") ; then
			pr_error "Crash tool not found"
		fi
	fi
	crash_version=$("${crash_cmd[@]}" --version | grep -m1 '^crash ' | \
						sed -e 's/crash //')

	# Assemble the base crash command options
	crash_opts=("${CRASH_OPTS[@]}" "-x" "--CRASHPAGER")

	# Substitute the kernel build path with the real kernel source directory
	# so that gdb can find the source
	if [ -n "${kernel_source}" ] ; then
		# Get the build path of the kernel
		build_path=$(objdump --dwarf=decodedline "${debug_kernel}" 2>/dev/null | \
						 grep -m1 '^/.*/init/main\.c:$' | \
						 sed -e 's,/init/main\.c:,,')

		pr_info "kernel build path" "${build_path}"

		if [ "${INFO}" -eq 0 ] ; then
			# Create a temporary commands file that crash loads on start
			infile=$(mktemp --tmpdir ucrash-XXXXXXXX)
			# shellcheck disable=SC2064
			trap "rm -f ${infile}" INT TERM EXIT HUP
			echo "gdb set substitute-path ${build_path} ${kernel_source}" > \
				 "${infile}"

			crash_opts+=("-i" "${infile}")
		else
			crash_opts+=("-i" "/tmp/ucrash-12345678")
		fi
	fi

	# Final crash command options
	crash_opts+=("${debug_kernel}" "${DUMP_FILE}")
#	if [ -n "${system_map}" ] ; then
#		crash_opts+=("${system_map}")
#	fi
    
	# Set the crash exports
	if [ -n "${debug_modules}" ] ; then
		export CRASH_MODULE_PATH=${debug_modules}
		pr_info "crash export" "CRASH_MODULE_PATH=${CRASH_MODULE_PATH}"
	fi
	export CRASH_EXTENSIONS=${CRASH_EXTENSIONS:-/usr/lib/crash/extensions}
	export CRASHPAGER=${CRASHPAGER:-/usr/bin/less -F -X}

	pr_info "crash export" "CRASH_EXTENSIONS=${CRASH_EXTENSIONS}"
	pr_info "crash export" "CRASHPAGER=${CRASHPAGER}"

	pr_info "crash command" "${crash_cmd[*]}"
	pr_info "crash options" "${crash_opts[*]}"
	pr_info "crash version" "${crash_version}"

	# Finally run crash
	if [ "${INFO}" -eq 0 ] ; then
		"${crash_cmd[@]}" "${crash_opts[@]}"
	fi
}

function usage()
{
	cat <<EOF
Usage: ucrash [-c CHROOT] [-d] [-h] [-i] DUMP_FILE[@ADDRESS] [DEBUG_KERNEL]
       [[--] [CRASH_OPTIONS]]

Run the crash tool against the given kernel dump file.

Positional arguments:
  DUMP_FILE      The kernel core dump file.
  @ADDRESS       An @ADDRESS value must be provided if the dumpfile is a raw
                 RAM dumpfile that has no header information.
  DEBUG_KERNEL   The debug kernel to use. If not specified, the tool will try
                 to locate the correct debug kernel.
  CRASH_OPTIONS  Additional options passed to the crash tool.

Optional arguments:
  -c, --chroot CHROOT  Run crash in the chroot CHROOT.
  --crash CRASH        Use the CRASH binary.
  -d, --debug          Enable debugging output (set -x).
  -h, --help           Show this help text.
  -i, --info           Just show all the info without actually running crash.
EOF
}

# -----------------------------------------------------------------------------
# Main entry point

if [ "$(id -u)" -eq 0 ] ; then
	pr_error "You should not run as root"
fi

# upkg root directory
UPKG_DIR=${HOME}/.cache/upkg

INFO=0
CRASH_OPTS=()
DUMP_FILE=
DEBUG_KERNEL=
CHROOT=
CRASH=

# Parse the commandline
while [ $# -gt 0 ] ; do
	case "${1}" in
		-c|--chroot)
			shift
			CHROOT=${1}
			;;
		--crash)
			shift
			CRASH=${1}
			if ! [ -x "${CRASH}" ] ; then
				pr_error "No such file or not executable: ${CRASH}"
			fi
			;;
		-d|--debug)
			set -x;
			;;
		-h|--help)
			usage
			exit
			;;
		-i|--info)
			INFO=1
			;;
		--)
			shift
			CRASH_OPTS=("${@}")
			break
			;;
		-*)
			pr_error "Unexpected argument: ${1}"
			;;
		*)
			if [ -z "${DUMP_FILE}" ] ; then
				DUMP_FILE="${1}"
			elif [ -z "${DEBUG_KERNEL}" ] ; then
				DEBUG_KERNEL="${1}"
			else
				pr_error "Unexpected argument: ${1}"
			fi
			;;
	esac
	shift
done

if [ -z "${DUMP_FILE}" ] ; then
	usage
	exit 1
fi

if ! [ -e "${DUMP_FILE}" ] ; then
	pr_error "No such dump file: ${DUMP_FILE}"
fi
DUMP_FILE=$(readlink -e "${DUMP_FILE}")

if [ -n "${DEBUG_KERNEL}" ] ; then
	if ! [ -e "${DEBUG_KERNEL}"  ] ; then
		pr_error "No such debug kernel: ${DEBUG_KERNEL}"
	fi
	DEBUG_KERNEL=$(readlink -e "${DEBUG_KERNEL}")
	parse_debug_kernel
else
	parse_dump_file
fi

run_crash
