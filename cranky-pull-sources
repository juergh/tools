#!/bin/bash -eu
#
# Download kernel source packages from a PPA
#

function out()
{
	local rc=$?

	if [ "${rc}" -ne 0 ] ; then
		echo "Script failed" >&2
	fi
}

function usage()
{
	cat <<EOF
Usage: cranky-pull-sources [-h] POCKET

Download the kernel source packages from the provided pocket.

Positional arguments:
  POCKET      The pocket to pull the source package from. If set to 'none',
              uses the version from the previous changelog entry.

Optional arguments:
  -h, --help  Show this help text and exit.
EOF
}

CRANKY=${CRANKY:-cranky}

pocket=

while [ ${#} -gt 0 ] ; do
	case "${1}" in
		-h|--help)
			usage
			exit
			;;
		release|security|updates|proposed|none|updates#[0-9]|proposed#[0-9]|build#[0-9])
			if [ -z "${pocket}" ] ; then
				pocket=${1}
			else
				echo "Invalid argument: ${1}" >&2
				exit 2
			fi
			;;
		*)
			echo "Invalid argument: ${1}" >&2
			exit 2
			;;
	esac
	shift
done

if [ -z "${pocket}" ] ; then
	usage
	exit 2
fi

trap out EXIT INT TERM HUP

# Get the source package versions from the provided pocket
if [ "${pocket}" != "none" ] ; then
	declare -A versions=()
	while IFS=' ' read -r package version rest ; do
		versions[${package}]=${version}
	done < <("${CRANKY}" rmadison -s -p "${pocket}" .)
fi

# Walk through the package set
use_series=0
while read -r path ; do
	(
		cd "${path}"

		# Get the series and the source package names
		if [ -e debian/debian.env ] ; then
			# shellcheck disable=SC1091
			. debian/debian.env
			changelog=${DEBIAN}/changelog
		else
			changelog=debian/changelog
		fi

		# Determine the package version
		if [ "${pocket}" != "none" ] ; then
			series=$(dpkg-parsechangelog -l "${changelog}" -S Distribution)
			package=$(dpkg-parsechangelog -l "${changelog}" -S Source)
			version=${versions[${package}]}
		else
			series=$(dpkg-parsechangelog -l "${changelog}" -S Distribution -o 1 -c 1)
			package=$(dpkg-parsechangelog -l "${changelog}" -S Source -o 1 -c 1)
			version=$(dpkg-parsechangelog -l "${changelog}" -S Version -o 1 -c 1)
		fi

		# Download the source package into the parent directory
		cd ..

		if [ "${use_series}" -eq 0 ] ; then
			if ! "${CRANKY}" pull-source "${package}" "${version}" ; then
				use_series=1
			fi
		fi

		if [ "${use_series}" -eq 1 ] ; then
			"${CRANKY}" pull-source "${package}" "${version}" "${series}"
		fi
	)
done < <("${CRANKY}" shell-helper source-packages-path)
