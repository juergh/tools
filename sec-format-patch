#!/bin/bash -eu

function out()
{
	local rc=${?}

	trap - EXIT INT TERM HUP
	[ ${rc} -eq 0 ] || echo "Error: Script failed" >&2
	exit ${rc}
}

function print_jira_link()
{
	local summary=${1}

	python3 -c "
import sys
from jira import JIRA

server = 'https://warthogs.atlassian.net'
summary = '${summary}'

jira = JIRA(server=server)
issues = jira.search_issues(f'project=\'KERNSEC\' and summary~\'{summary}\'')

if issues:
    for i in issues:
        if i.fields.summary == summary:
            print(f'{server}/browse/{i.key}')
            sys.exit(0)

sys.exit(1)
"
}

function print_sru_template()
{
	cat <<EOF
[ Impact ]

*** TBD ***


[ Test Case ]

*** TBD ***


[ Where Problems Could Occur ]

*** TBD ***


[ Notes ]

*** TBD ***

EOF

	if [ -n "${VERSION}" ] ; then
		echo "v${VERSION}:"
		echo "  -"
	fi
	echo
}

function format_patch()
{
	local branch=${1} odir=${2} msg_id=${3}
	local series start rev_range cves cve_list s subject_prefix opts msg_id new_msg_id f

	rm -rf "${odir}"
	mkdir -p "${odir}"

	series=${branch#*/}
	# FIXME: The following is not robust and flexible enough...
	start=$(git merge-base "${branch}" linux-ubuntu/"${series}"/linux)
	rev_range=${start}..${branch}

	# Get all CVEs in the revision range
	readarray -t cves < <(git log --format=%b "${rev_range}" | \
	                      grep -hE '^CVE-[0-9]{4}-[0-9]*$' | sort -u)

	# Generate the cover letter content
	cve_list=$(printf "%s, " "${cves[@]}")
	{
		local cve summary

		# Subject
		echo "${cve_list%, }"
		echo

		# CVE links
		printf "https://ubuntu.com/security/%s\n" "${cves[@]}"

		# Jira links
		echo
		for cve in "${cves[@]}" ; do
			summary="${cve^^} ${series^}"
			print_jira_link "${summary}" || echo "-- No Jira ticket found for: ${summary}" >&2
		done

		# SRUT template
		if [ -z "${msg_id}" ] ; then
			# Single series submission
			echo
			print_sru_template
		fi
	} > "${odir}"/cover-letter

	# Generate the subject prefix
	s=${series::1}
	subject_prefix="SRU][${s^}][PATCH"
	if [ -n "${VERSION}" ] ; then
		subject_prefix="${subject_prefix} v${VERSION}"
	fi

	# git format-patch options
	opts=(
		"--cover-letter"
		"--cover-from-description=subject"
		"--description-file=${odir}/cover-letter"
		"--thread=shallow"
		"--output-directory=${odir}"
		"--filename-max-length=50"
		"--subject-prefix=${subject_prefix}"
	)
	if [ -n "${msg_id}" ] ; then
		opts+=("--in-reply-to=${msg_id}")
	fi

	# Create the patchset
	git format-patch "${opts[@]}" "${rev_range}"

	# HACK: git format-patch creates a cover letter message ID that only contains
	# seconds-since-the-epoc as a unique identifier which results in identical
	# cover letter message IDs for a multi-series submission. Ugh.
	# Hack around that by adding the series name to the message ID.
	msg_id=$(grep -m1 '^Message-ID: ' "${odir}"/0000-cover-letter.patch)
	msg_id=${msg_id#*<}
	msg_id=${msg_id%>*}
	new_msg_id=${series}.${msg_id}
	sed -i "s/${msg_id}/${new_msg_id}/g" "${odir}"/*.patch

	# Add the series name to the patch filenames
	for f in "${odir}"/0*.patch ; do
		f=${f##*/}
		mv "${odir}"/"${f}" "${odir}"/"${f%%-*}-${series}-${f#*-}"
	done
}

function sort_series()
{
	while IFS= read -r line ; do
		case "${line}" in
			trusty|xenial) echo "1 ${line}" ;;
			*)             echo "2 ${line}" ;;
		esac
	done | sort -rV | sed 's/^..//'
}

function usage()
{
	cat <<EOF
Usage: sec-format-patch [-h] [-v NUM] [SERIES [SERIES...]]

Positional arguments:
  SERIES  Series name. If not provided, is determined from the available branches.

Optional arguments:
  -h, --help         Show this help text and exit.
  -v, --version NUM  Patch submission version.
EOF
}

VERSION=
series=()

while [ ${#} -gt 0 ] ; do
	case "${1}" in
		-h|--help)
			usage
			exit
			;;
		-v|--version)
			shift
			VERSION=${1}
			;;
		*)
			series=("${@}")
			break
			;;
	esac
	shift
done

trap out EXIT INT TERM HUP

branch_prefix=$(git rev-parse --abbrev-ref HEAD | sed 's,/.*,,')

if [ ${#series[@]} -eq 0 ] ; then
	readarray -t series < <(git branch | sed -n "s,^..${branch_prefix}/,,p")
fi

sha1=$(date -R | sha1sum | awk '{ print $1 }')

#
# Sanity check
#

private=0
public=0
for s in "${series[@]}" ; do
	case "${s}" in
		trusty|xenial|bionic) private=1 ;;
		*) public=1 ;;
	esac
done

if [ ${private} -eq 1 ] && [ ${public} -eq 1 ] ; then
	echo "Can't mix private and public kernels in a single patch series submission" >&2
	exit 1
fi

#
# Create a top-level message ID for multi-series submissions
#

msg_id=
if [ ${#series[@]} -gt 1 ] ; then
	msg_id="<${sha1}.$(date +%s).git.$(git config user.email)>"
fi

#
# Create the patch series
#

rm -rf .sec-*

for s in "${series[@]}" ; do
	branch=${branch_prefix}/${s}
	odir=.sec-${s}

	echo "-- ${branch}"
	format_patch "${branch}" "${odir}" "${msg_id}"
	echo
done

#
# Combine the patch series
#

rm -rf .outgoing
mkdir .outgoing
mv .sec-*/*.patch .outgoing/
rm -rf .sec-*

#
# Create a top-level cover letter for multi-series submissions
#

if [ -n "${msg_id}" ] ; then
	# Collect all CVE numbers from all patches
	readarray -t cves < <(grep -hE '^CVE-[0-9]{4}-[0-9]*$' .outgoing/0*.patch | sort -u)

	series_list=$(printf "%.1s/" "${series[@]^}")
	series_list=${series_list%/}

	patch="PATCH 0/${#series[@]}"
	if [ -n "${VERSION}" ] ; then
		patch="${patch} v${VERSION}"
	fi

	cve_list=$(printf "%s, " "${cves[@]}")
	cve_list=${cve_list%, }

	{
		echo "From ${sha1} Mon Sep 17 00:00:00 2001"
		echo "Message-Id: ${msg_id}"
		echo "References: ${msg_id}"
		echo "Subject: [SRU][${series_list}][${patch}] ${cve_list}"
		echo
		printf "https://ubuntu.com/security/%s\n" "${cves[@]}"
		echo
		print_sru_template
	} > .outgoing/0000-0-cover-letter.patch
fi

#
# Done
#

echo "-- Final patch series in .outgoing/"
ls -1 .outgoing/*
