#!/bin/bash -eu

function format_patch()
{
	local cve=${1^^} series=${2,,}
	local branch start odir s

	branch=${cve}/${series}
	start=
	while IFS= read -r h ; do
		if git for-each-ref | grep -q "${h}" ; then
			start=${h}
			break
		fi
	done < <(git log --format=%H "${branch}"~1)

	odir=.sec-${series}
	mkdir "${odir}"

	# Create the patchset
	s=${series::1}
	git format-patch \
		--output-directory "${odir}" \
		--filename-max-length=50 \
		--cover-letter \
		--subject-prefix="SRU][${s^}][PATCH" \
		"${start}".."${branch}"

	# Add the series name to the patch filenames
	for f in "${odir}"/0*.patch ; do
		f=${f##*/}
		mv "${odir}"/"${f}" "${odir}"/"${f%%-*}-${series}-${f#*-}"
	done
}

function sort_series()
{
	while IFS= read -r line ; do
		case "${line}" in
			trusty|xenial) echo "1 ${line}" ;;
			*)             echo "2 ${line}" ;;
		esac
	done | sort -rV | sed 's/^..//'
}

function usage()
{
	cat <<EOF
Usage: sec-format-patch [CVE] [SERIES [SERIES...]]

Positional arguments:
  CVE         CVE number. If not provided, is determined from the current branch name.
  SERIES      Series name. If not provided, is determined from the available branches.

Optional arguments:
  -h, --help  Show this help text and exit.
EOF
}

cve=

while [ ${#} -gt 0 ] ; do
	case "${1}" in
		-h|--help)
			usage
			exit
			;;
		*)
			if [ -n "${cve}" ] ; then
				break
			fi
			cve=${1}
			;;
	esac
done

if [ -z "${cve}" ] ; then
	branch=$(git rev-parse --abbrev-ref HEAD)
	cve=${branch%%/*}
fi

readarray -t series < <(
	if [ ${#} -gt 0 ] ; then
		printf "%s\n" "${@}"
	else
		git branch | sed -n "s,^..${cve}/,,p"
	fi | sort_series
)

#
# Sanity check
#

private=0
public=0
for s in "${series[@]}" ; do
	case "${s}" in
		trusty|xenial|bionic) private=1 ;;
		*) public=1 ;;
	esac
done

if [ ${private} -eq 1 ] && [ ${public} -eq 1 ] ; then
	echo "Can't mix private and public kernels in a single patch series submission" >&2
	exit 1
fi

#
# Create the patch series
#

rm -rf .sec-*

for s in "${series[@]}" ; do
	echo "-- ${s^}"
	format_patch "${cve}" "${s}"
	echo
done

#
# Collect the CVE tags from all patches
#

readarray -t cves < <(grep -hE '^CVE-[0-9]{4}-[0-9]*$' .sec-*/0*.patch | sort -u)

#
# Construct the cover letter subject
#

series_list=$(printf "%.1s/" "${series[@]^}")
series_list=${series_list%/}

cve_list=$(printf "%s," "${cves[@]}")
cve_list=${cve_list%,}

subject="Subject: [SRU][${series_list}][PATCH 0/x] ${cve_list}"

#
# Merge the cover letters
#

rm -rf .outgoing
mkdir .outgoing

{
	sed -e "s|^Subject: .*|${subject}|" -e '/BLURB HERE/,$d' .sec-"${series[0]}"/0000-*.patch
	printf "https://ubuntu.com/security/%s\n" "${cves[@]}"
	echo
	echo "[ Impact ]"
	echo
	echo "[ Test Case ]"
	echo
	echo "[ Where Problems Could Occur ]"
	echo
	for s in "${series[@]}" ; do
		echo "[ Diffstat ${s^} ]"
		sed -e '1,/BLURB HERE/d' -e '/^--/,$d' .sec-"${s}"/0000-*.patch
	done
	sed -e '/^--/,$!d' .sec-"${series[0]}"/0000-*.patch
} > .outgoing/cover-letter.patch

#
# Move all patches to the outgoing directory
#

mv .sec-*/*.patch .outgoing/
rm .outgoing/0000-*.patch
mv .outgoing/cover-letter.patch .outgoing/0000-cover-letter.patch

# Clean up
rm -rf .sec-*

echo "-- Combined patch series in .outgoing"
ls -1 .outgoing/*
