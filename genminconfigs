#!/bin/bash -eu
#
# Generate minimal Ubuntu configs
#

function out()
{
	if [ -d CONFIGS.orig ] ; then
		rm -rf CONFIGS
		mv CONFIGS.orig CONFIGS
	fi
}

function usage()
{
	cat <<EOF
Usage: genminconfigs [-h] [--import]

Generate minimal Ubuntu configs in MINCONFIGS/.

Optional arguments:
  -h, --help  Show this help text and exit.
  --import    Import generated configs into annotations.
EOF
}

import=0

while [ $# -gt 0 ] ; do
	case "${1}" in
		-h|--help)
			usage
			exit
			;;
		--import)
			import=1
			;;
		*)
			usage
			exit 2
			;;
	esac
	shift
done

if ! [ -f debian/debian.env ] ; then
	echo "-- Not an Ubuntu kernel tree" >&2
	exit 1
fi

trap out EXIT INT TERM HUP

if [ -d CONFIGS ] ; then
	mv CONFIGS CONFIGS.orig
fi

cranky fdr clean genconfigs || true

mkdir -p MINCONFIGS
for config in CONFIGS/* ; do
	echo
	echo "-- Process ${config}"

	# Remove all modules
	sed -i '/=m$/d' "${config}"

	# Add some important modules back (for local testing)
	cat <<EOF >>"${config}"
CONFIG_ISO9660_FS=m
CONFIG_NLS_ISO8859_1=m
EOF

	config=${config#*/}
	arch=${config%%-*}
	case "${arch}" in
		amd64)   kernarch="x86_64"  ;;
		arm64)   kernarch="arm64"   ;;
		armhf)   kernarch="arm"     ;;
		i386)    kernarch="i386"    ;;
		ppc64el) kernarch="powerpc" ;;
		riscv64) kernarch="riscv"   ;;
		s390x)   kernarch="s390"    ;;
		*)       echo "-- Invalid architecture: ${arch}" >&2 ; exit 1   ;;
	esac
	ccompile=$(dpkg-architecture -qDEB_HOST_GNU_TYPE -a"${arch}" 2>/dev/null)-

	rm -rf buildd
	mkdir buildd

	cp CONFIGS/"${config}" buildd/.config
	ARCH=${kernarch} CROSS_COMPILE=${ccompile} \
		cranky chroot run -- make O=buildd olddefconfig

	mv buildd/.config MINCONFIGS/"${config}"
done

if [ ${import} -eq 1 ] ; then
	for config in MINCONFIGS/* ; do
		echo
		echo "-- Import ${config}"

		config=${config#*/}
		arch=${config%%-*}
		flavor=${config##*.}

		./debian/scripts/misc/annotations --import MINCONFIGS/"${config}" \
			--arch "${arch}" --flavour "${flavor}"
	done

	cranky updateconfigs || true
fi

